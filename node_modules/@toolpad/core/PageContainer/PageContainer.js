'use client';

import * as React from 'react';
import PropTypes from 'prop-types';
import Breadcrumbs from '@mui/material/Breadcrumbs';
import Container from '@mui/material/Container';
import Link from '@mui/material/Link';
import Stack from '@mui/material/Stack';
import Typography from '@mui/material/Typography';
import useSlotProps from '@mui/utils/useSlotProps';
import { styled } from '@mui/material';
import { Link as ToolpadLink } from "../shared/Link.js";
import { PageContainerToolbar } from "./PageContainerToolbar.js";
import { NavigationContext, RouterContext } from "../shared/context.js";
import { getItemTitle, isPageItem } from "../shared/navigation.js";
import { useApplicationTitle } from "../shared/branding.js";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
const PageContentHeader = styled('div')(({
  theme
}) => ({
  display: 'flex',
  flexDirection: 'row',
  jusifyCOntent: 'space-between',
  gap: theme.spacing(2)
}));
const isRootPage = item => isPageItem(item) && !item.segment;
function createPageLookup(navigation, segments = [], base = '') {
  const result = new Map();
  const resolveSegment = segment => `${base}${segment ? `/${segment}` : ''}` || '/';
  const root = navigation.find(item => isRootPage(item));
  const rootCrumb = root ? {
    path: resolveSegment(''),
    ...root
  } : undefined;
  for (const item of navigation) {
    if (!isPageItem(item)) {
      continue;
    }
    const isNonProdEnv = process.env.NODE_ENV !== 'production';
    const path = resolveSegment(item.segment);
    if (isNonProdEnv && result.has(path)) {
      console.warn(`Duplicate path in navigation: ${path}`);
    }
    const itemCrumb = {
      path,
      ...item
    };
    const navigationSegments = [...segments, ...(rootCrumb && !isRootPage(item) ? [rootCrumb] : []), itemCrumb];
    result.set(path, navigationSegments);
    if (item.children) {
      const childrenLookup = createPageLookup(item.children, navigationSegments, path);
      for (const [childPath, childItems] of childrenLookup) {
        if (isNonProdEnv && result.has(childPath)) {
          console.warn(`Duplicate path in navigation: ${childPath}`);
        }
        result.set(childPath, childItems);
      }
    }
  }
  return result;
}
function matchPath(navigation, path) {
  const lookup = createPageLookup(navigation);
  return lookup.get(path) ?? null;
}
/**
 *
 * Demos:
 *
 * - [Page Container](https://mui.com/toolpad/core/react-page-container/)
 *
 * API:
 *
 * - [PageContainer API](https://mui.com/toolpad/core/api/page-container)
 */
function PageContainer(props) {
  const {
    children,
    slots,
    slotProps,
    ...rest
  } = props;
  const routerContext = React.useContext(RouterContext);
  const navigationContext = React.useContext(NavigationContext);
  const pathname = routerContext?.pathname ?? '/';
  const applicationTitle = useApplicationTitle();
  const breadCrumbs = React.useMemo(() => {
    let crumbs = matchPath(navigationContext, pathname) ?? [];
    if (crumbs.length <= 0 || crumbs[0].path !== '/') {
      crumbs = [{
        segment: '',
        path: '/',
        title: applicationTitle
      }, ...crumbs];
    }
    return crumbs;
  }, [navigationContext, pathname, applicationTitle]);
  const title = (breadCrumbs ? getItemTitle(breadCrumbs[breadCrumbs.length - 1]) : '') ?? props.title;
  const ToolbarComponent = props?.slots?.toolbar ?? PageContainerToolbar;
  const toolbarSlotProps = useSlotProps({
    elementType: ToolbarComponent,
    ownerState: props,
    externalSlotProps: props?.slotProps?.toolbar,
    additionalProps: {}
  });
  return /*#__PURE__*/_jsx(Container, {
    ...rest,
    children: /*#__PURE__*/_jsxs(Stack, {
      sx: {
        my: 2
      },
      spacing: 2,
      children: [/*#__PURE__*/_jsxs(Stack, {
        children: [/*#__PURE__*/_jsx(Breadcrumbs, {
          "aria-label": "breadcrumb",
          children: breadCrumbs ? breadCrumbs.map((item, index) => {
            return index < breadCrumbs.length - 1 ? /*#__PURE__*/_jsx(Link, {
              component: ToolpadLink,
              underline: "hover",
              color: "inherit",
              href: item.path,
              children: getItemTitle(item)
            }, item.path) : /*#__PURE__*/_jsx(Typography, {
              color: "text.primary",
              children: getItemTitle(item)
            }, item.path);
          }) : null
        }), /*#__PURE__*/_jsxs(PageContentHeader, {
          children: [title ? /*#__PURE__*/_jsx(Typography, {
            variant: "h4",
            children: title
          }) : null, /*#__PURE__*/_jsx(ToolbarComponent, {
            ...toolbarSlotProps
          })]
        })]
      }), /*#__PURE__*/_jsx("div", {
        children: children
      })]
    })
  });
}
process.env.NODE_ENV !== "production" ? PageContainer.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: PropTypes.node,
  /**
   * @ignore
   */
  slotProps: PropTypes.shape({
    toolbar: PropTypes.shape({
      children: PropTypes.node
    }).isRequired
  }),
  /**
   * @ignore
   */
  slots: PropTypes.shape({
    toolbar: PropTypes.elementType
  }),
  /**
   * @ignore
   */
  title: PropTypes.string
} : void 0;
export { PageContainer };