'use client';

var _LockOutlinedIcon, _Typography, _Checkbox;
import * as React from 'react';
import PropTypes from 'prop-types';
import Avatar from '@mui/material/Avatar';
import Alert from '@mui/material/Alert';
import Box from '@mui/material/Box';
import Checkbox from '@mui/material/Checkbox';
import Container from '@mui/material/Container';
import Divider from '@mui/material/Divider';
import FormControlLabel from '@mui/material/FormControlLabel';
import TextField from '@mui/material/TextField';
import Typography from '@mui/material/Typography';
import LoadingButton from '@mui/lab/LoadingButton';
import LockOutlinedIcon from '@mui/icons-material/LockOutlined';
import GitHubIcon from '@mui/icons-material/GitHub';
import PasswordIcon from '@mui/icons-material/Password';
import FacebookIcon from '@mui/icons-material/Facebook';
import Stack from '@mui/material/Stack';
import { BrandingContext, DocsContext, RouterContext } from "../shared/context.js";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
const IconProviderMap = new Map([['github', /*#__PURE__*/_jsx(GitHubIcon, {}, "github")], ['credentials', /*#__PURE__*/_jsx(PasswordIcon, {}, "credentials")], ['google',
/*#__PURE__*/
// colored google icon
_jsxs("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  height: "24",
  viewBox: "0 0 24 24",
  width: "24",
  children: [/*#__PURE__*/_jsx("path", {
    d: "M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z",
    fill: "#4285F4"
  }), /*#__PURE__*/_jsx("path", {
    d: "M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z",
    fill: "#34A853"
  }), /*#__PURE__*/_jsx("path", {
    d: "M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z",
    fill: "#FBBC05"
  }), /*#__PURE__*/_jsx("path", {
    d: "M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z",
    fill: "#EA4335"
  }), /*#__PURE__*/_jsx("path", {
    d: "M1 1h22v22H1z",
    fill: "none"
  })]
}, "google")], ['facebook', /*#__PURE__*/_jsx(FacebookIcon, {}, "facebook")]]);
/**
 *
 * Demos:
 *
 * - [Sign-in Page](https://mui.com/toolpad/core/react-sign-in-page/)
 *
 * API:
 *
 * - [SignInPage API](https://mui.com/toolpad/core/api/sign-in-page)
 */
function SignInPage(props) {
  const {
    providers,
    signIn,
    slots,
    slotProps
  } = props;
  const branding = React.useContext(BrandingContext);
  const docs = React.useContext(DocsContext);
  const router = React.useContext(RouterContext);
  const credentialsProvider = providers?.find(provider => provider.id === 'credentials');
  const [{
    loading,
    providerId,
    error
  }, setFormStatus] = React.useState({
    providerId: '',
    loading: false,
    error: ''
  });
  const callbackUrl = router?.searchParams.get('callbackUrl') ?? '/';
  const singleProvider = React.useMemo(() => providers?.length === 1, [providers]);
  return /*#__PURE__*/_jsx(Container, {
    component: "main",
    maxWidth: "xs",
    children: /*#__PURE__*/_jsxs(Box, {
      sx: {
        marginTop: 8,
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center'
      },
      children: [branding?.logo ?? /*#__PURE__*/_jsx(Avatar, {
        sx: {
          my: 1,
          mb: 2,
          bgcolor: 'primary.main'
        },
        children: _LockOutlinedIcon || (_LockOutlinedIcon = /*#__PURE__*/_jsx(LockOutlinedIcon, {}))
      }), /*#__PURE__*/_jsxs(Typography, {
        variant: "h5",
        color: "textPrimary",
        gutterBottom: true,
        children: ["Sign in ", branding?.title ? `to ${branding.title}` : null]
      }), _Typography || (_Typography = /*#__PURE__*/_jsx(Typography, {
        variant: "body2",
        color: "textSecondary",
        gutterBottom: true,
        children: "Welcome user, please sign in to continue"
      })), /*#__PURE__*/_jsxs(Box, {
        sx: {
          mt: 2
        },
        children: [/*#__PURE__*/_jsxs(Stack, {
          spacing: 1,
          children: [error && providerId !== 'credentials' ? /*#__PURE__*/_jsx(Alert, {
            severity: "error",
            children: error
          }) : null, Object.values(providers ?? {}).map(provider => {
            if (provider.id === 'credentials') {
              return null;
            }
            return /*#__PURE__*/_jsx("form", {
              onSubmit: async event => {
                event.preventDefault();
                setFormStatus({
                  error: '',
                  providerId: provider.id,
                  loading: true
                });
                const oauthResponse = await signIn?.(provider, undefined, callbackUrl);
                setFormStatus(prev => ({
                  ...prev,
                  loading: oauthResponse?.error || docs ? false : prev.loading,
                  error: oauthResponse?.error
                }));
              },
              children: /*#__PURE__*/_jsx(LoadingButton, {
                variant: "contained",
                type: "submit",
                fullWidth: true,
                size: "large",
                disableElevation: true,
                name: 'provider',
                color: singleProvider ? 'primary' : 'inherit',
                loading: loading && providerId === provider.id,
                value: provider.id,
                startIcon: IconProviderMap.get(provider.id),
                sx: {
                  textTransform: 'capitalize',
                  filter: 'opacity(0.9)',
                  transition: 'filter 0.2s ease-in',
                  '&:hover': {
                    filter: 'opacity(1)'
                  }
                },
                children: /*#__PURE__*/_jsxs("span", {
                  children: ["Sign in with ", provider.name]
                })
              }, provider.id)
            }, provider.id);
          })]
        }), credentialsProvider ? /*#__PURE__*/_jsxs(React.Fragment, {
          children: [singleProvider ? null : /*#__PURE__*/_jsx(Divider, {
            sx: {
              mt: 2,
              mx: 0,
              mb: 1
            },
            children: "or"
          }), error && providerId === 'credentials' ? /*#__PURE__*/_jsx(Alert, {
            sx: {
              my: 2
            },
            severity: "error",
            children: error
          }) : null, /*#__PURE__*/_jsxs(Box, {
            component: "form",
            onSubmit: async event => {
              setFormStatus({
                error: '',
                providerId: credentialsProvider.id,
                loading: true
              });
              event.preventDefault();
              const formData = new FormData(event.currentTarget);
              const credentialsResponse = await signIn?.(credentialsProvider, formData, callbackUrl);
              setFormStatus(prev => ({
                ...prev,
                loading: false,
                error: credentialsResponse?.error
              }));
            },
            children: [slots?.emailField ? /*#__PURE__*/_jsx(slots.emailField, {
              ...slotProps?.emailField
            }) : /*#__PURE__*/_jsx(TextField, {
              margin: "dense",
              required: true,
              slotProps: {
                htmlInput: {
                  sx: {
                    paddingTop: '12px',
                    paddingBottom: '12px'
                  }
                },
                inputLabel: {
                  sx: {
                    lineHeight: '1rem'
                  }
                }
              },
              fullWidth: true,
              id: "email",
              label: "Email Address",
              name: "email",
              type: "email",
              autoComplete: "email",
              autoFocus: docs ? false : singleProvider,
              ...slotProps?.emailField
            }), slots?.passwordField ? /*#__PURE__*/_jsx(slots.passwordField, {
              ...slotProps?.passwordField
            }) : /*#__PURE__*/_jsx(TextField, {
              margin: "dense",
              required: true,
              fullWidth: true,
              slotProps: {
                htmlInput: {
                  sx: {
                    paddingTop: '12px',
                    paddingBottom: '12px'
                  }
                },
                inputLabel: {
                  sx: {
                    lineHeight: '1rem'
                  }
                }
              },
              name: "password",
              label: "Password",
              type: "password",
              id: "password",
              autoComplete: "current-password",
              ...slotProps?.passwordField
            }), /*#__PURE__*/_jsx(FormControlLabel, {
              control: _Checkbox || (_Checkbox = /*#__PURE__*/_jsx(Checkbox, {
                value: "remember",
                color: "primary"
              })),
              label: "Remember me",
              slotProps: {
                typography: {
                  color: 'textSecondary'
                }
              }
            }), slots?.submitButton ? /*#__PURE__*/_jsx(slots.submitButton, {
              ...slotProps?.submitButton
            }) : /*#__PURE__*/_jsx(LoadingButton, {
              type: "submit",
              fullWidth: true,
              size: "large",
              variant: "contained",
              disableElevation: true,
              color: singleProvider ? 'primary' : 'inherit',
              loading: loading && providerId === credentialsProvider.id,
              sx: {
                mt: 3,
                mb: 2,
                textTransform: 'capitalize',
                filter: 'opacity(0.9)',
                transition: 'filter 0.2s ease-in',
                '&:hover': {
                  filter: 'opacity(1)'
                }
              },
              ...slotProps?.submitButton,
              children: "Sign in"
            }), slots?.forgotPasswordLink || slots?.signUpLink ? /*#__PURE__*/_jsxs(Box, {
              sx: {
                display: 'flex',
                justifyContent: 'space-between',
                mt: 2
              },
              children: [slots?.forgotPasswordLink ? /*#__PURE__*/_jsx(slots.forgotPasswordLink, {
                ...slotProps?.forgotPasswordLink
              }) : null, slots?.signUpLink ? /*#__PURE__*/_jsx(slots.signUpLink, {
                ...slotProps?.signUpLink
              }) : null]
            }) : null]
          })]
        }) : null]
      })]
    })
  });
}
process.env.NODE_ENV !== "production" ? SignInPage.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The list of authentication providers to display.
   * @default []
   */
  providers: PropTypes.arrayOf(PropTypes.shape({
    id: PropTypes.string.isRequired,
    name: PropTypes.string.isRequired
  })),
  /**
   * Callback fired when a user signs in.
   * @param {AuthProvider} provider The authentication provider.
   * @param {FormData} formData The form data if the provider id is 'credentials'.\
   * @param {string} callbackUrl The URL to redirect to after signing in.
   * @returns {void|Promise<AuthResponse>}
   * @default undefined
   */
  signIn: PropTypes.func,
  /**
   * The props used for each slot inside.
   * @default {}
   * @example { emailField: { autoFocus: false } }
   * @example { passwordField: { variant: 'outlined' } }
   * @example { emailField: { autoFocus: false }, passwordField: { variant: 'outlined' } }
   */
  slotProps: PropTypes.shape({
    emailField: PropTypes.object,
    forgotPasswordLink: PropTypes.object,
    passwordField: PropTypes.object,
    signUpLink: PropTypes.object,
    submitButton: PropTypes.object
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   * @example { forgotPasswordLink: <Link href="/forgot-password">Forgot password?</Link> }
   * @example { signUpLink: <Link href="/sign-up">Sign up</Link> }
   */
  slots: PropTypes.shape({
    emailField: PropTypes.elementType,
    forgotPasswordLink: PropTypes.elementType,
    passwordField: PropTypes.elementType,
    signUpLink: PropTypes.elementType,
    submitButton: PropTypes.elementType
  })
} : void 0;
export { SignInPage };