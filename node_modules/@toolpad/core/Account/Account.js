var _LogoutIcon;
import * as React from 'react';
import PropTypes from 'prop-types';
import IconButton from '@mui/material/IconButton';
import Button from '@mui/material/Button';
import Popover from '@mui/material/Popover';
import Stack from '@mui/material/Stack';
import Typography from '@mui/material/Typography';
import LogoutIcon from '@mui/icons-material/Logout';
import { SessionContext, AuthenticationContext } from "../AppProvider/AppProvider.js";
import { SessionAvatar } from "./SessionAvatar.js";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
/**
 *
 * Demos:
 *
 * - [Account](https://mui.com/toolpad/core/react-account/)
 * - [Dashboard Layout](https://mui.com/toolpad/core/react-dashboard-layout/)
 * - [Sign-in Page](https://mui.com/toolpad/core/react-sign-in-page/)
 *
 * API:
 *
 * - [Account API](https://mui.com/toolpad/core/api/account)
 */
function Account(props) {
  const {
    slotProps,
    signInLabel = 'Sign In',
    signOutLabel = 'Sign Out'
  } = props;
  const session = React.useContext(SessionContext);
  const [anchorEl, setAnchorEl] = React.useState(null);
  const handleClick = event => {
    setAnchorEl(event.currentTarget);
  };
  const handleClose = () => {
    setAnchorEl(null);
  };
  const open = Boolean(anchorEl);
  const popoverId = React.useId();
  const id = open ? popoverId : undefined;
  const authentication = React.useContext(AuthenticationContext);
  if (!authentication) {
    return null;
  }
  if (!session?.user) {
    return /*#__PURE__*/_jsx(Button, {
      disableElevation: true,
      variant: "contained",
      color: "inherit",
      size: "small",
      ...slotProps?.signInButton,
      onClick: authentication.signIn,
      sx: {
        ...slotProps?.signInButton?.sx,
        textTransform: 'capitalize',
        filter: 'opacity(0.9)',
        transition: 'filter 0.2s ease-in',
        '&:hover': {
          filter: 'opacity(1)'
        }
      },
      children: signInLabel
    });
  }
  return /*#__PURE__*/_jsxs(React.Fragment, {
    children: [/*#__PURE__*/_jsx(IconButton, {
      "aria-describedby": id,
      onClick: handleClick,
      "aria-label": "Current User",
      ...slotProps?.iconButton,
      children: /*#__PURE__*/_jsx(SessionAvatar, {
        session: session,
        sx: {
          width: 32,
          height: 32,
          ...slotProps?.avatar
        }
      })
    }), /*#__PURE__*/_jsx(Popover, {
      id: id,
      open: open,
      anchorEl: anchorEl,
      onClose: handleClose,
      anchorOrigin: {
        vertical: 'bottom',
        horizontal: 'right'
      },
      children: /*#__PURE__*/_jsxs(Stack, {
        sx: {
          width: 350
        },
        children: [/*#__PURE__*/_jsxs(Stack, {
          direction: "row",
          sx: {
            px: 3,
            py: 2,
            borderBottom: 1,
            borderColor: 'divider'
          },
          spacing: 2,
          children: [/*#__PURE__*/_jsx(SessionAvatar, {
            session: session,
            sx: {
              width: 48,
              height: 48
            }
          }), /*#__PURE__*/_jsxs(Stack, {
            children: [/*#__PURE__*/_jsx(Typography, {
              fontWeight: "bolder",
              children: session.user.name
            }), /*#__PURE__*/_jsx(Typography, {
              variant: "caption",
              children: session.user.email
            })]
          })]
        }), /*#__PURE__*/_jsx(Stack, {
          direction: "row",
          sx: {
            p: 1,
            justifyContent: 'right'
          },
          children: /*#__PURE__*/_jsx(Button, {
            disabled: !authentication,
            variant: "contained",
            size: "small",
            disableElevation: true,
            color: "inherit",
            startIcon: _LogoutIcon || (_LogoutIcon = /*#__PURE__*/_jsx(LogoutIcon, {})),
            ...slotProps?.signOutButton,
            onClick: authentication?.signOut,
            sx: {
              ...slotProps?.signOutButton?.sx,
              textTransform: 'capitalize',
              filter: 'opacity(0.9)',
              transition: 'filter 0.2s ease-in',
              '&:hover': {
                filter: 'opacity(1)'
              }
            },
            children: signOutLabel || 'Sign Out'
          })
        })]
      })
    })]
  });
}
process.env.NODE_ENV !== "production" ? Account.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The label for the sign in button.
   * @default 'Sign In'
   */
  signInLabel: PropTypes.string,
  /**
   * The label for the sign out button.
   * @default 'Sign Out'
   */
  signOutLabel: PropTypes.string,
  /**
   * Props to pass to the constituent components in the Account component.
   * @default {}
   * @example { signInButton: { color: 'primary' }, signOutButton: { color: 'secondary' } }
   */
  slotProps: PropTypes.shape({
    avatar: PropTypes.object,
    iconButton: PropTypes.object,
    signInButton: PropTypes.object,
    signOutButton: PropTypes.object
  })
} : void 0;
export { Account };