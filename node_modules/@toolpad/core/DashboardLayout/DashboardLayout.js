'use client';

var _DarkModeIcon, _LightModeIcon, _ExpandLessIcon, _ExpandMoreIcon, _Toolbar, _MenuOpenIcon, _MenuIcon, _ToolpadLogo, _ThemeSwitcher, _Account, _Toolbar2;
import * as React from 'react';
import PropTypes from 'prop-types';
import { styled, useTheme } from '@mui/material';
import MuiAppBar from '@mui/material/AppBar';
import Box from '@mui/material/Box';
import Collapse from '@mui/material/Collapse';
import Divider from '@mui/material/Divider';
import Drawer from '@mui/material/Drawer';
import IconButton from '@mui/material/IconButton';
import List from '@mui/material/List';
import ListItem from '@mui/material/ListItem';
import ListItemButton from '@mui/material/ListItemButton';
import ListItemIcon from '@mui/material/ListItemIcon';
import ListItemText from '@mui/material/ListItemText';
import ListSubheader from '@mui/material/ListSubheader';
import Stack from '@mui/material/Stack';
import Toolbar from '@mui/material/Toolbar';
import Tooltip from '@mui/material/Tooltip';
import Typography from '@mui/material/Typography';
import DarkModeIcon from '@mui/icons-material/DarkMode';
import LightModeIcon from '@mui/icons-material/LightMode';
import ExpandLessIcon from '@mui/icons-material/ExpandLess';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import MenuIcon from '@mui/icons-material/Menu';
import MenuOpenIcon from '@mui/icons-material/MenuOpen';
import useSsr from '@toolpad/utils/hooks/useSsr';
import { Account } from "../Account/index.js";
import { Link } from "../shared/Link.js";
import { BrandingContext, NavigationContext, PaletteModeContext, RouterContext, WindowContext } from "../shared/context.js";
import { ToolpadLogo } from "./ToolpadLogo.js";
import { getItemTitle, getPageItemFullPath, hasSelectedNavigationChildren } from "../shared/navigation.js";
import { useApplicationTitle } from "../shared/branding.js";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
const DRAWER_WIDTH = 320; // px

const AppBar = styled(MuiAppBar)(({
  theme
}) => ({
  borderWidth: 0,
  borderBottomWidth: 1,
  borderStyle: 'solid',
  borderColor: (theme.vars ?? theme).palette.divider,
  boxShadow: 'none',
  // TODO: Temporary fix to issue reported in https://github.com/mui/material-ui/issues/43244
  left: 0,
  zIndex: theme.zIndex.drawer + 1
}));
const LogoContainer = styled('div')({
  position: 'relative',
  height: 40,
  '& img': {
    maxHeight: 40
  }
});
const NavigationListItemButton = styled(ListItemButton)(({
  theme
}) => ({
  borderRadius: 8,
  '&.Mui-selected': {
    '& .MuiListItemIcon-root': {
      color: (theme.vars ?? theme).palette.primary.dark
    },
    '& .MuiTypography-root': {
      color: (theme.vars ?? theme).palette.primary.dark
    },
    '& .MuiSvgIcon-root': {
      color: (theme.vars ?? theme).palette.primary.dark
    },
    '& .MuiTouchRipple-child': {
      backgroundColor: (theme.vars ?? theme).palette.primary.dark
    }
  },
  '& .MuiSvgIcon-root': {
    color: (theme.vars ?? theme).palette.action.active
  }
}));
function ThemeSwitcher() {
  const isSsr = useSsr();
  const theme = useTheme();
  const {
    paletteMode,
    setPaletteMode,
    isDualTheme
  } = React.useContext(PaletteModeContext);
  const toggleMode = React.useCallback(() => {
    setPaletteMode(paletteMode === 'dark' ? 'light' : 'dark');
  }, [paletteMode, setPaletteMode]);
  return isDualTheme ? /*#__PURE__*/_jsx(Tooltip, {
    title: isSsr ? 'Switch mode' : `${paletteMode === 'dark' ? 'Light' : 'Dark'} mode`,
    enterDelay: 1000,
    children: /*#__PURE__*/_jsx("div", {
      children: /*#__PURE__*/_jsx(IconButton, {
        "aria-label": isSsr ? 'Switch theme mode' : `Switch to ${paletteMode === 'dark' ? 'light' : 'dark'} mode`,
        onClick: toggleMode,
        sx: {
          color: (theme.vars ?? theme).palette.primary.dark,
          padding: 1,
          marginRight: 1
        },
        children: theme.getColorSchemeSelector ? /*#__PURE__*/_jsxs(React.Fragment, {
          children: [/*#__PURE__*/_jsx(DarkModeIcon, {
            sx: {
              display: 'inline',
              [theme.getColorSchemeSelector('dark')]: {
                display: 'none'
              }
            }
          }), /*#__PURE__*/_jsx(LightModeIcon, {
            sx: {
              display: 'none',
              [theme.getColorSchemeSelector('dark')]: {
                display: 'inline'
              }
            }
          })]
        }) : /*#__PURE__*/_jsx(React.Fragment, {
          children: isSsr || paletteMode !== 'dark' ? _DarkModeIcon || (_DarkModeIcon = /*#__PURE__*/_jsx(DarkModeIcon, {})) : _LightModeIcon || (_LightModeIcon = /*#__PURE__*/_jsx(LightModeIcon, {}))
        })
      })
    })
  }) : null;
}
function DashboardSidebarSubNavigation({
  subNavigation,
  basePath = '',
  depth = 0,
  onLinkClick,
  validatedItemIds,
  uniqueItemPaths
}) {
  const routerContext = React.useContext(RouterContext);
  const pathname = routerContext?.pathname ?? '/';
  const initialExpandedSidebarItemIds = React.useMemo(() => subNavigation.map((navigationItem, navigationItemIndex) => ({
    navigationItem,
    originalIndex: navigationItemIndex
  })).filter(({
    navigationItem
  }) => hasSelectedNavigationChildren(navigationItem, basePath, pathname)).map(({
    originalIndex
  }) => `${depth}-${originalIndex}`), [basePath, depth, pathname, subNavigation]);
  const [expandedSidebarItemIds, setExpandedSidebarItemIds] = React.useState(initialExpandedSidebarItemIds);
  const handleOpenFolderClick = React.useCallback(itemId => () => {
    setExpandedSidebarItemIds(previousValue => previousValue.includes(itemId) ? previousValue.filter(previousValueItemId => previousValueItemId !== itemId) : [...previousValue, itemId]);
  }, []);
  return /*#__PURE__*/_jsx(List, {
    sx: {
      padding: 0,
      mb: depth === 0 ? 4 : 1,
      pl: 2 * depth
    },
    children: subNavigation.map((navigationItem, navigationItemIndex) => {
      if (navigationItem.kind === 'header') {
        return /*#__PURE__*/_jsx(ListSubheader, {
          component: "div",
          sx: {
            fontSize: 12,
            fontWeight: '700',
            height: 40,
            pl: 4
          },
          children: getItemTitle(navigationItem)
        }, `subheader-${depth}-${navigationItemIndex}`);
      }
      if (navigationItem.kind === 'divider') {
        const nextItem = subNavigation[navigationItemIndex + 1];
        return /*#__PURE__*/_jsx(Divider, {
          sx: {
            borderBottomWidth: 2,
            mx: 2,
            mt: 1,
            mb: nextItem?.kind === 'header' ? 0 : 1
          }
        }, `divider-${depth}-${navigationItemIndex}`);
      }
      const navigationItemFullPath = getPageItemFullPath(basePath, navigationItem);
      const navigationItemId = `${depth}-${navigationItemIndex}`;
      const isNestedNavigationExpanded = expandedSidebarItemIds.includes(navigationItemId);
      const nestedNavigationCollapseIcon = isNestedNavigationExpanded ? _ExpandLessIcon || (_ExpandLessIcon = /*#__PURE__*/_jsx(ExpandLessIcon, {})) : _ExpandMoreIcon || (_ExpandMoreIcon = /*#__PURE__*/_jsx(ExpandMoreIcon, {}));
      const listItem = /*#__PURE__*/_jsx(ListItem, {
        sx: {
          pt: 0,
          pb: 0
        },
        children: /*#__PURE__*/_jsxs(NavigationListItemButton, {
          selected: pathname === navigationItemFullPath && !navigationItem.children,
          ...(navigationItem.children ? {
            onClick: handleOpenFolderClick(navigationItemId)
          } : {
            LinkComponent: Link,
            href: navigationItemFullPath,
            onClick: onLinkClick
          }),
          children: [navigationItem.icon ? /*#__PURE__*/_jsx(ListItemIcon, {
            sx: {
              minWidth: 34
            },
            children: navigationItem.icon
          }) : null, /*#__PURE__*/_jsx(ListItemText, {
            primary: getItemTitle(navigationItem),
            sx: {
              '& .MuiTypography-root': {
                fontWeight: '500'
              }
            }
          }), navigationItem.action ?? null, navigationItem.children ? nestedNavigationCollapseIcon : null]
        })
      });
      if (process.env.NODE_ENV !== 'production' && !validatedItemIds.has(navigationItemId)) {
        if (!uniqueItemPaths.has(navigationItemFullPath)) {
          uniqueItemPaths.add(navigationItemFullPath);
        } else {
          console.warn(`Duplicate path in navigation: ${navigationItemFullPath}`);
        }
        validatedItemIds.add(navigationItemId);
      }
      return /*#__PURE__*/_jsxs(React.Fragment, {
        children: [listItem, navigationItem.children ? /*#__PURE__*/_jsx(Collapse, {
          in: isNestedNavigationExpanded,
          timeout: "auto",
          unmountOnExit: true,
          children: /*#__PURE__*/_jsx(DashboardSidebarSubNavigation, {
            subNavigation: navigationItem.children,
            basePath: navigationItemFullPath,
            depth: depth + 1,
            onLinkClick: onLinkClick,
            validatedItemIds: validatedItemIds,
            uniqueItemPaths: uniqueItemPaths
          })
        }) : null]
      }, navigationItemId);
    })
  });
}
/**
 *
 * Demos:
 *
 * - [Dashboard Layout](https://mui.com/toolpad/core/react-dashboard-layout/)
 *
 * API:
 *
 * - [DashboardLayout API](https://mui.com/toolpad/core/api/dashboard-layout)
 */
function DashboardLayout(props) {
  const {
    children
  } = props;
  const branding = React.useContext(BrandingContext);
  const navigation = React.useContext(NavigationContext);
  const appWindow = React.useContext(WindowContext);
  const applicationTitle = useApplicationTitle();
  const [isMobileNavigationOpen, setIsMobileNavigationOpen] = React.useState(false);
  const validatedItemIdsRef = React.useRef(new Set());
  const uniqueItemPathsRef = React.useRef(new Set());
  const handleSetMobileNavigationOpen = React.useCallback(newOpen => () => {
    setIsMobileNavigationOpen(newOpen);
  }, []);
  const toggleMobileNavigation = React.useCallback(() => {
    setIsMobileNavigationOpen(previousOpen => !previousOpen);
  }, []);
  const handleNavigationLinkClick = React.useCallback(() => {
    setIsMobileNavigationOpen(false);
  }, []);

  // If useEffect was used, the reset would also happen on the client render after SSR which we don't need
  React.useMemo(() => {
    validatedItemIdsRef.current = new Set();
    uniqueItemPathsRef.current = new Set();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [navigation]);
  const drawerContent = /*#__PURE__*/_jsxs(React.Fragment, {
    children: [_Toolbar || (_Toolbar = /*#__PURE__*/_jsx(Toolbar, {})), /*#__PURE__*/_jsx(Box, {
      component: "nav",
      sx: {
        overflow: 'auto',
        pt: navigation[0]?.kind === 'header' ? 0 : 2
      },
      children: /*#__PURE__*/_jsx(DashboardSidebarSubNavigation, {
        subNavigation: navigation,
        onLinkClick: handleNavigationLinkClick,
        validatedItemIds: validatedItemIdsRef.current,
        uniqueItemPaths: uniqueItemPathsRef.current
      })
    })]
  });
  return /*#__PURE__*/_jsxs(Box, {
    sx: {
      display: 'flex'
    },
    children: [/*#__PURE__*/_jsx(AppBar, {
      color: "inherit",
      position: "fixed",
      children: /*#__PURE__*/_jsxs(Toolbar, {
        sx: {
          backgroundColor: 'inherit',
          minWidth: '100vw'
        },
        children: [/*#__PURE__*/_jsx(Box, {
          sx: {
            display: {
              xs: 'block',
              md: 'none'
            }
          },
          children: /*#__PURE__*/_jsx(Tooltip, {
            title: `${isMobileNavigationOpen ? 'Close' : 'Open'} menu`,
            placement: "right",
            enterDelay: 1000,
            children: /*#__PURE__*/_jsx("div", {
              children: /*#__PURE__*/_jsx(IconButton, {
                "aria-label": `${isMobileNavigationOpen ? 'Close' : 'Open'} navigation menu`,
                onClick: toggleMobileNavigation,
                edge: "start",
                sx: {
                  ml: 0
                },
                children: isMobileNavigationOpen ? _MenuOpenIcon || (_MenuOpenIcon = /*#__PURE__*/_jsx(MenuOpenIcon, {})) : _MenuIcon || (_MenuIcon = /*#__PURE__*/_jsx(MenuIcon, {}))
              })
            })
          })
        }), /*#__PURE__*/_jsx(Box, {
          sx: {
            position: {
              xs: 'absolute',
              md: 'static'
            },
            left: {
              xs: '50%',
              md: 'auto'
            },
            transform: {
              xs: 'translateX(-50%)',
              md: 'none'
            }
          },
          children: /*#__PURE__*/_jsx(Link, {
            href: "/",
            style: {
              color: 'inherit',
              textDecoration: 'none'
            },
            children: /*#__PURE__*/_jsxs(Stack, {
              direction: "row",
              alignItems: "center",
              children: [/*#__PURE__*/_jsx(LogoContainer, {
                children: branding?.logo ?? (_ToolpadLogo || (_ToolpadLogo = /*#__PURE__*/_jsx(ToolpadLogo, {
                  size: 40
                })))
              }), /*#__PURE__*/_jsx(Typography, {
                variant: "h6",
                sx: {
                  color: theme => (theme.vars ?? theme).palette.primary.main,
                  fontWeight: '700',
                  ml: 0.5
                },
                children: applicationTitle
              })]
            })
          })
        }), /*#__PURE__*/_jsx(Box, {
          sx: {
            flexGrow: 1
          }
        }), _ThemeSwitcher || (_ThemeSwitcher = /*#__PURE__*/_jsx(ThemeSwitcher, {})), _Account || (_Account = /*#__PURE__*/_jsx(Account, {}))]
      })
    }), /*#__PURE__*/_jsx(Drawer, {
      container: appWindow?.document.body,
      variant: "temporary",
      open: isMobileNavigationOpen,
      onClose: handleSetMobileNavigationOpen(false),
      ModalProps: {
        keepMounted: true // Better open performance on mobile.
      },
      sx: {
        display: {
          xs: 'block',
          md: 'none'
        },
        width: DRAWER_WIDTH,
        flexShrink: 0,
        [`& .MuiDrawer-paper`]: {
          width: DRAWER_WIDTH,
          boxSizing: 'border-box',
          backgroundImage: 'none',
          borderRight: theme => `1px solid ${(theme.vars ?? theme).palette.divider}`
        }
      },
      children: drawerContent
    }), /*#__PURE__*/_jsx(Drawer, {
      variant: "permanent",
      sx: {
        display: {
          xs: 'none',
          md: 'block'
        },
        width: DRAWER_WIDTH,
        flexShrink: 0,
        [`& .MuiDrawer-paper`]: {
          width: DRAWER_WIDTH,
          boxSizing: 'border-box',
          backgroundImage: 'none'
        }
      },
      children: drawerContent
    }), /*#__PURE__*/_jsxs(Box, {
      component: "main",
      sx: {
        flexGrow: 1,
        // TODO: Temporary fix to issue reported in https://github.com/mui/material-ui/issues/43244
        minWidth: {
          xs: isMobileNavigationOpen ? '100vw' : 'auto',
          md: 'auto'
        }
      },
      children: [_Toolbar2 || (_Toolbar2 = /*#__PURE__*/_jsx(Toolbar, {})), children]
    })]
  });
}
process.env.NODE_ENV !== "production" ? DashboardLayout.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the dashboard.
   */
  children: PropTypes.node
} : void 0;
export { DashboardLayout };