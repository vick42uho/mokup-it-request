"use strict";
'use client';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DashboardLayout = DashboardLayout;
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _material = require("@mui/material");
var _AppBar = _interopRequireDefault(require("@mui/material/AppBar"));
var _Box = _interopRequireDefault(require("@mui/material/Box"));
var _Collapse = _interopRequireDefault(require("@mui/material/Collapse"));
var _Divider = _interopRequireDefault(require("@mui/material/Divider"));
var _Drawer = _interopRequireDefault(require("@mui/material/Drawer"));
var _IconButton = _interopRequireDefault(require("@mui/material/IconButton"));
var _List = _interopRequireDefault(require("@mui/material/List"));
var _ListItem = _interopRequireDefault(require("@mui/material/ListItem"));
var _ListItemButton = _interopRequireDefault(require("@mui/material/ListItemButton"));
var _ListItemIcon = _interopRequireDefault(require("@mui/material/ListItemIcon"));
var _ListItemText = _interopRequireDefault(require("@mui/material/ListItemText"));
var _ListSubheader = _interopRequireDefault(require("@mui/material/ListSubheader"));
var _Stack = _interopRequireDefault(require("@mui/material/Stack"));
var _Toolbar3 = _interopRequireDefault(require("@mui/material/Toolbar"));
var _Tooltip = _interopRequireDefault(require("@mui/material/Tooltip"));
var _Typography = _interopRequireDefault(require("@mui/material/Typography"));
var _DarkMode = _interopRequireDefault(require("@mui/icons-material/DarkMode"));
var _LightMode = _interopRequireDefault(require("@mui/icons-material/LightMode"));
var _ExpandLess = _interopRequireDefault(require("@mui/icons-material/ExpandLess"));
var _ExpandMore = _interopRequireDefault(require("@mui/icons-material/ExpandMore"));
var _Menu = _interopRequireDefault(require("@mui/icons-material/Menu"));
var _MenuOpen = _interopRequireDefault(require("@mui/icons-material/MenuOpen"));
var _useSsr = _interopRequireDefault(require("@toolpad/utils/hooks/useSsr"));
var _Account2 = require("../Account");
var _Link = require("../shared/Link");
var _context = require("../shared/context");
var _ToolpadLogo2 = require("./ToolpadLogo");
var _navigation = require("../shared/navigation");
var _branding = require("../shared/branding");
var _jsxRuntime = require("react/jsx-runtime");
var _DarkModeIcon, _LightModeIcon, _ExpandLessIcon, _ExpandMoreIcon, _Toolbar, _MenuOpenIcon, _MenuIcon, _ToolpadLogo, _ThemeSwitcher, _Account, _Toolbar2;
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const DRAWER_WIDTH = 320; // px

const AppBar = (0, _material.styled)(_AppBar.default)(({
  theme
}) => {
  var _theme$vars;
  return {
    borderWidth: 0,
    borderBottomWidth: 1,
    borderStyle: 'solid',
    borderColor: ((_theme$vars = theme.vars) != null ? _theme$vars : theme).palette.divider,
    boxShadow: 'none',
    // TODO: Temporary fix to issue reported in https://github.com/mui/material-ui/issues/43244
    left: 0,
    zIndex: theme.zIndex.drawer + 1
  };
});
const LogoContainer = (0, _material.styled)('div')({
  position: 'relative',
  height: 40,
  '& img': {
    maxHeight: 40
  }
});
const NavigationListItemButton = (0, _material.styled)(_ListItemButton.default)(({
  theme
}) => {
  var _theme$vars2, _theme$vars3, _theme$vars4, _theme$vars5, _theme$vars6;
  return {
    borderRadius: 8,
    '&.Mui-selected': {
      '& .MuiListItemIcon-root': {
        color: ((_theme$vars2 = theme.vars) != null ? _theme$vars2 : theme).palette.primary.dark
      },
      '& .MuiTypography-root': {
        color: ((_theme$vars3 = theme.vars) != null ? _theme$vars3 : theme).palette.primary.dark
      },
      '& .MuiSvgIcon-root': {
        color: ((_theme$vars4 = theme.vars) != null ? _theme$vars4 : theme).palette.primary.dark
      },
      '& .MuiTouchRipple-child': {
        backgroundColor: ((_theme$vars5 = theme.vars) != null ? _theme$vars5 : theme).palette.primary.dark
      }
    },
    '& .MuiSvgIcon-root': {
      color: ((_theme$vars6 = theme.vars) != null ? _theme$vars6 : theme).palette.action.active
    }
  };
});
function ThemeSwitcher() {
  var _theme$vars7;
  const isSsr = (0, _useSsr.default)();
  const theme = (0, _material.useTheme)();
  const {
    paletteMode,
    setPaletteMode,
    isDualTheme
  } = React.useContext(_context.PaletteModeContext);
  const toggleMode = React.useCallback(() => {
    setPaletteMode(paletteMode === 'dark' ? 'light' : 'dark');
  }, [paletteMode, setPaletteMode]);
  return isDualTheme ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_Tooltip.default, {
    title: isSsr ? 'Switch mode' : `${paletteMode === 'dark' ? 'Light' : 'Dark'} mode`,
    enterDelay: 1000,
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_IconButton.default, {
        "aria-label": isSsr ? 'Switch theme mode' : `Switch to ${paletteMode === 'dark' ? 'light' : 'dark'} mode`,
        onClick: toggleMode,
        sx: {
          color: ((_theme$vars7 = theme.vars) != null ? _theme$vars7 : theme).palette.primary.dark,
          padding: 1,
          marginRight: 1
        },
        children: theme.getColorSchemeSelector ? /*#__PURE__*/(0, _jsxRuntime.jsxs)(React.Fragment, {
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_DarkMode.default, {
            sx: {
              display: 'inline',
              [theme.getColorSchemeSelector('dark')]: {
                display: 'none'
              }
            }
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_LightMode.default, {
            sx: {
              display: 'none',
              [theme.getColorSchemeSelector('dark')]: {
                display: 'inline'
              }
            }
          })]
        }) : /*#__PURE__*/(0, _jsxRuntime.jsx)(React.Fragment, {
          children: isSsr || paletteMode !== 'dark' ? _DarkModeIcon || (_DarkModeIcon = /*#__PURE__*/(0, _jsxRuntime.jsx)(_DarkMode.default, {})) : _LightModeIcon || (_LightModeIcon = /*#__PURE__*/(0, _jsxRuntime.jsx)(_LightMode.default, {}))
        })
      })
    })
  }) : null;
}
function DashboardSidebarSubNavigation({
  subNavigation,
  basePath = '',
  depth = 0,
  onLinkClick,
  validatedItemIds,
  uniqueItemPaths
}) {
  var _routerContext$pathna;
  const routerContext = React.useContext(_context.RouterContext);
  const pathname = (_routerContext$pathna = routerContext == null ? void 0 : routerContext.pathname) != null ? _routerContext$pathna : '/';
  const initialExpandedSidebarItemIds = React.useMemo(() => subNavigation.map((navigationItem, navigationItemIndex) => ({
    navigationItem,
    originalIndex: navigationItemIndex
  })).filter(({
    navigationItem
  }) => (0, _navigation.hasSelectedNavigationChildren)(navigationItem, basePath, pathname)).map(({
    originalIndex
  }) => `${depth}-${originalIndex}`), [basePath, depth, pathname, subNavigation]);
  const [expandedSidebarItemIds, setExpandedSidebarItemIds] = React.useState(initialExpandedSidebarItemIds);
  const handleOpenFolderClick = React.useCallback(itemId => () => {
    setExpandedSidebarItemIds(previousValue => previousValue.includes(itemId) ? previousValue.filter(previousValueItemId => previousValueItemId !== itemId) : [...previousValue, itemId]);
  }, []);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_List.default, {
    sx: {
      padding: 0,
      mb: depth === 0 ? 4 : 1,
      pl: 2 * depth
    },
    children: subNavigation.map((navigationItem, navigationItemIndex) => {
      var _navigationItem$actio;
      if (navigationItem.kind === 'header') {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_ListSubheader.default, {
          component: "div",
          sx: {
            fontSize: 12,
            fontWeight: '700',
            height: 40,
            pl: 4
          },
          children: (0, _navigation.getItemTitle)(navigationItem)
        }, `subheader-${depth}-${navigationItemIndex}`);
      }
      if (navigationItem.kind === 'divider') {
        const nextItem = subNavigation[navigationItemIndex + 1];
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Divider.default, {
          sx: {
            borderBottomWidth: 2,
            mx: 2,
            mt: 1,
            mb: (nextItem == null ? void 0 : nextItem.kind) === 'header' ? 0 : 1
          }
        }, `divider-${depth}-${navigationItemIndex}`);
      }
      const navigationItemFullPath = (0, _navigation.getPageItemFullPath)(basePath, navigationItem);
      const navigationItemId = `${depth}-${navigationItemIndex}`;
      const isNestedNavigationExpanded = expandedSidebarItemIds.includes(navigationItemId);
      const nestedNavigationCollapseIcon = isNestedNavigationExpanded ? _ExpandLessIcon || (_ExpandLessIcon = /*#__PURE__*/(0, _jsxRuntime.jsx)(_ExpandLess.default, {})) : _ExpandMoreIcon || (_ExpandMoreIcon = /*#__PURE__*/(0, _jsxRuntime.jsx)(_ExpandMore.default, {}));
      const listItem = /*#__PURE__*/(0, _jsxRuntime.jsx)(_ListItem.default, {
        sx: {
          pt: 0,
          pb: 0
        },
        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(NavigationListItemButton, {
          selected: pathname === navigationItemFullPath && !navigationItem.children,
          ...(navigationItem.children ? {
            onClick: handleOpenFolderClick(navigationItemId)
          } : {
            LinkComponent: _Link.Link,
            href: navigationItemFullPath,
            onClick: onLinkClick
          }),
          children: [navigationItem.icon ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_ListItemIcon.default, {
            sx: {
              minWidth: 34
            },
            children: navigationItem.icon
          }) : null, /*#__PURE__*/(0, _jsxRuntime.jsx)(_ListItemText.default, {
            primary: (0, _navigation.getItemTitle)(navigationItem),
            sx: {
              '& .MuiTypography-root': {
                fontWeight: '500'
              }
            }
          }), (_navigationItem$actio = navigationItem.action) != null ? _navigationItem$actio : null, navigationItem.children ? nestedNavigationCollapseIcon : null]
        })
      });
      if (process.env.NODE_ENV !== 'production' && !validatedItemIds.has(navigationItemId)) {
        if (!uniqueItemPaths.has(navigationItemFullPath)) {
          uniqueItemPaths.add(navigationItemFullPath);
        } else {
          console.warn(`Duplicate path in navigation: ${navigationItemFullPath}`);
        }
        validatedItemIds.add(navigationItemId);
      }
      return /*#__PURE__*/(0, _jsxRuntime.jsxs)(React.Fragment, {
        children: [listItem, navigationItem.children ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_Collapse.default, {
          in: isNestedNavigationExpanded,
          timeout: "auto",
          unmountOnExit: true,
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(DashboardSidebarSubNavigation, {
            subNavigation: navigationItem.children,
            basePath: navigationItemFullPath,
            depth: depth + 1,
            onLinkClick: onLinkClick,
            validatedItemIds: validatedItemIds,
            uniqueItemPaths: uniqueItemPaths
          })
        }) : null]
      }, navigationItemId);
    })
  });
}
/**
 *
 * Demos:
 *
 * - [Dashboard Layout](https://mui.com/toolpad/core/react-dashboard-layout/)
 *
 * API:
 *
 * - [DashboardLayout API](https://mui.com/toolpad/core/api/dashboard-layout)
 */
function DashboardLayout(props) {
  var _navigation$, _branding$logo;
  const {
    children
  } = props;
  const branding = React.useContext(_context.BrandingContext);
  const navigation = React.useContext(_context.NavigationContext);
  const appWindow = React.useContext(_context.WindowContext);
  const applicationTitle = (0, _branding.useApplicationTitle)();
  const [isMobileNavigationOpen, setIsMobileNavigationOpen] = React.useState(false);
  const validatedItemIdsRef = React.useRef(new Set());
  const uniqueItemPathsRef = React.useRef(new Set());
  const handleSetMobileNavigationOpen = React.useCallback(newOpen => () => {
    setIsMobileNavigationOpen(newOpen);
  }, []);
  const toggleMobileNavigation = React.useCallback(() => {
    setIsMobileNavigationOpen(previousOpen => !previousOpen);
  }, []);
  const handleNavigationLinkClick = React.useCallback(() => {
    setIsMobileNavigationOpen(false);
  }, []);

  // If useEffect was used, the reset would also happen on the client render after SSR which we don't need
  React.useMemo(() => {
    validatedItemIdsRef.current = new Set();
    uniqueItemPathsRef.current = new Set();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [navigation]);
  const drawerContent = /*#__PURE__*/(0, _jsxRuntime.jsxs)(React.Fragment, {
    children: [_Toolbar || (_Toolbar = /*#__PURE__*/(0, _jsxRuntime.jsx)(_Toolbar3.default, {})), /*#__PURE__*/(0, _jsxRuntime.jsx)(_Box.default, {
      component: "nav",
      sx: {
        overflow: 'auto',
        pt: ((_navigation$ = navigation[0]) == null ? void 0 : _navigation$.kind) === 'header' ? 0 : 2
      },
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(DashboardSidebarSubNavigation, {
        subNavigation: navigation,
        onLinkClick: handleNavigationLinkClick,
        validatedItemIds: validatedItemIdsRef.current,
        uniqueItemPaths: uniqueItemPathsRef.current
      })
    })]
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Box.default, {
    sx: {
      display: 'flex'
    },
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(AppBar, {
      color: "inherit",
      position: "fixed",
      children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Toolbar3.default, {
        sx: {
          backgroundColor: 'inherit',
          minWidth: '100vw'
        },
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_Box.default, {
          sx: {
            display: {
              xs: 'block',
              md: 'none'
            }
          },
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Tooltip.default, {
            title: `${isMobileNavigationOpen ? 'Close' : 'Open'} menu`,
            placement: "right",
            enterDelay: 1000,
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
              children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_IconButton.default, {
                "aria-label": `${isMobileNavigationOpen ? 'Close' : 'Open'} navigation menu`,
                onClick: toggleMobileNavigation,
                edge: "start",
                sx: {
                  ml: 0
                },
                children: isMobileNavigationOpen ? _MenuOpenIcon || (_MenuOpenIcon = /*#__PURE__*/(0, _jsxRuntime.jsx)(_MenuOpen.default, {})) : _MenuIcon || (_MenuIcon = /*#__PURE__*/(0, _jsxRuntime.jsx)(_Menu.default, {}))
              })
            })
          })
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_Box.default, {
          sx: {
            position: {
              xs: 'absolute',
              md: 'static'
            },
            left: {
              xs: '50%',
              md: 'auto'
            },
            transform: {
              xs: 'translateX(-50%)',
              md: 'none'
            }
          },
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Link.Link, {
            href: "/",
            style: {
              color: 'inherit',
              textDecoration: 'none'
            },
            children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Stack.default, {
              direction: "row",
              alignItems: "center",
              children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(LogoContainer, {
                children: (_branding$logo = branding == null ? void 0 : branding.logo) != null ? _branding$logo : _ToolpadLogo || (_ToolpadLogo = /*#__PURE__*/(0, _jsxRuntime.jsx)(_ToolpadLogo2.ToolpadLogo, {
                  size: 40
                }))
              }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_Typography.default, {
                variant: "h6",
                sx: {
                  color: theme => {
                    var _theme$vars8;
                    return ((_theme$vars8 = theme.vars) != null ? _theme$vars8 : theme).palette.primary.main;
                  },
                  fontWeight: '700',
                  ml: 0.5
                },
                children: applicationTitle
              })]
            })
          })
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_Box.default, {
          sx: {
            flexGrow: 1
          }
        }), _ThemeSwitcher || (_ThemeSwitcher = /*#__PURE__*/(0, _jsxRuntime.jsx)(ThemeSwitcher, {})), _Account || (_Account = /*#__PURE__*/(0, _jsxRuntime.jsx)(_Account2.Account, {}))]
      })
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_Drawer.default, {
      container: appWindow == null ? void 0 : appWindow.document.body,
      variant: "temporary",
      open: isMobileNavigationOpen,
      onClose: handleSetMobileNavigationOpen(false),
      ModalProps: {
        keepMounted: true // Better open performance on mobile.
      },
      sx: {
        display: {
          xs: 'block',
          md: 'none'
        },
        width: DRAWER_WIDTH,
        flexShrink: 0,
        [`& .MuiDrawer-paper`]: {
          width: DRAWER_WIDTH,
          boxSizing: 'border-box',
          backgroundImage: 'none',
          borderRight: theme => {
            var _theme$vars9;
            return `1px solid ${((_theme$vars9 = theme.vars) != null ? _theme$vars9 : theme).palette.divider}`;
          }
        }
      },
      children: drawerContent
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_Drawer.default, {
      variant: "permanent",
      sx: {
        display: {
          xs: 'none',
          md: 'block'
        },
        width: DRAWER_WIDTH,
        flexShrink: 0,
        [`& .MuiDrawer-paper`]: {
          width: DRAWER_WIDTH,
          boxSizing: 'border-box',
          backgroundImage: 'none'
        }
      },
      children: drawerContent
    }), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Box.default, {
      component: "main",
      sx: {
        flexGrow: 1,
        // TODO: Temporary fix to issue reported in https://github.com/mui/material-ui/issues/43244
        minWidth: {
          xs: isMobileNavigationOpen ? '100vw' : 'auto',
          md: 'auto'
        }
      },
      children: [_Toolbar2 || (_Toolbar2 = /*#__PURE__*/(0, _jsxRuntime.jsx)(_Toolbar3.default, {})), children]
    })]
  });
}
process.env.NODE_ENV !== "production" ? DashboardLayout.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the dashboard.
   */
  children: _propTypes.default.node
} : void 0;