"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Account = Account;
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _IconButton = _interopRequireDefault(require("@mui/material/IconButton"));
var _Button = _interopRequireDefault(require("@mui/material/Button"));
var _Popover = _interopRequireDefault(require("@mui/material/Popover"));
var _Stack = _interopRequireDefault(require("@mui/material/Stack"));
var _Typography = _interopRequireDefault(require("@mui/material/Typography"));
var _Logout = _interopRequireDefault(require("@mui/icons-material/Logout"));
var _AppProvider = require("../AppProvider/AppProvider");
var _SessionAvatar = require("./SessionAvatar");
var _jsxRuntime = require("react/jsx-runtime");
var _LogoutIcon;
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 *
 * Demos:
 *
 * - [Account](https://mui.com/toolpad/core/react-account/)
 * - [Dashboard Layout](https://mui.com/toolpad/core/react-dashboard-layout/)
 * - [Sign-in Page](https://mui.com/toolpad/core/react-sign-in-page/)
 *
 * API:
 *
 * - [Account API](https://mui.com/toolpad/core/api/account)
 */
function Account(props) {
  var _slotProps$signOutBut;
  const {
    slotProps,
    signInLabel = 'Sign In',
    signOutLabel = 'Sign Out'
  } = props;
  const session = React.useContext(_AppProvider.SessionContext);
  const [anchorEl, setAnchorEl] = React.useState(null);
  const handleClick = event => {
    setAnchorEl(event.currentTarget);
  };
  const handleClose = () => {
    setAnchorEl(null);
  };
  const open = Boolean(anchorEl);
  const popoverId = React.useId();
  const id = open ? popoverId : undefined;
  const authentication = React.useContext(_AppProvider.AuthenticationContext);
  if (!authentication) {
    return null;
  }
  if (!(session != null && session.user)) {
    var _slotProps$signInButt;
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button.default, {
      disableElevation: true,
      variant: "contained",
      color: "inherit",
      size: "small",
      ...(slotProps == null ? void 0 : slotProps.signInButton),
      onClick: authentication.signIn,
      sx: {
        ...(slotProps == null || (_slotProps$signInButt = slotProps.signInButton) == null ? void 0 : _slotProps$signInButt.sx),
        textTransform: 'capitalize',
        filter: 'opacity(0.9)',
        transition: 'filter 0.2s ease-in',
        '&:hover': {
          filter: 'opacity(1)'
        }
      },
      children: signInLabel
    });
  }
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(React.Fragment, {
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_IconButton.default, {
      "aria-describedby": id,
      onClick: handleClick,
      "aria-label": "Current User",
      ...(slotProps == null ? void 0 : slotProps.iconButton),
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_SessionAvatar.SessionAvatar, {
        session: session,
        sx: {
          width: 32,
          height: 32,
          ...(slotProps == null ? void 0 : slotProps.avatar)
        }
      })
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_Popover.default, {
      id: id,
      open: open,
      anchorEl: anchorEl,
      onClose: handleClose,
      anchorOrigin: {
        vertical: 'bottom',
        horizontal: 'right'
      },
      children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Stack.default, {
        sx: {
          width: 350
        },
        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)(_Stack.default, {
          direction: "row",
          sx: {
            px: 3,
            py: 2,
            borderBottom: 1,
            borderColor: 'divider'
          },
          spacing: 2,
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_SessionAvatar.SessionAvatar, {
            session: session,
            sx: {
              width: 48,
              height: 48
            }
          }), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Stack.default, {
            children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_Typography.default, {
              fontWeight: "bolder",
              children: session.user.name
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_Typography.default, {
              variant: "caption",
              children: session.user.email
            })]
          })]
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_Stack.default, {
          direction: "row",
          sx: {
            p: 1,
            justifyContent: 'right'
          },
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button.default, {
            disabled: !authentication,
            variant: "contained",
            size: "small",
            disableElevation: true,
            color: "inherit",
            startIcon: _LogoutIcon || (_LogoutIcon = /*#__PURE__*/(0, _jsxRuntime.jsx)(_Logout.default, {})),
            ...(slotProps == null ? void 0 : slotProps.signOutButton),
            onClick: authentication == null ? void 0 : authentication.signOut,
            sx: {
              ...(slotProps == null || (_slotProps$signOutBut = slotProps.signOutButton) == null ? void 0 : _slotProps$signOutBut.sx),
              textTransform: 'capitalize',
              filter: 'opacity(0.9)',
              transition: 'filter 0.2s ease-in',
              '&:hover': {
                filter: 'opacity(1)'
              }
            },
            children: signOutLabel || 'Sign Out'
          })
        })]
      })
    })]
  });
}
process.env.NODE_ENV !== "production" ? Account.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The label for the sign in button.
   * @default 'Sign In'
   */
  signInLabel: _propTypes.default.string,
  /**
   * The label for the sign out button.
   * @default 'Sign Out'
   */
  signOutLabel: _propTypes.default.string,
  /**
   * Props to pass to the constituent components in the Account component.
   * @default {}
   * @example { signInButton: { color: 'primary' }, signOutButton: { color: 'secondary' } }
   */
  slotProps: _propTypes.default.shape({
    avatar: _propTypes.default.object,
    iconButton: _propTypes.default.object,
    signInButton: _propTypes.default.object,
    signOutButton: _propTypes.default.object
  })
} : void 0;