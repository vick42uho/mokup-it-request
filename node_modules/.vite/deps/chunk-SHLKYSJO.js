import {
  getStepUtilityClass,
  stepClasses_default
} from "./chunk-WPMCM6SJ.js";
import {
  stepperClasses_default
} from "./chunk-LQQZCW7H.js";
import {
  useSlot
} from "./chunk-ZAJVZVHR.js";
import {
  styled_default,
  useThemeProps
} from "./chunk-QXF7ZQLR.js";
import {
  composeClasses
} from "./chunk-FV5AHGPT.js";
import {
  _extends,
  _objectWithoutPropertiesLoose,
  clsx_default,
  init_clsx,
  init_extends,
  init_objectWithoutPropertiesLoose,
  require_prop_types
} from "./chunk-G4QZBI3F.js";
import {
  require_jsx_runtime
} from "./chunk-DFRVR3IJ.js";
import {
  __toESM,
  require_react
} from "./chunk-VEEUVK2K.js";

// node_modules/@mui/joy/Step/Step.js
init_extends();
init_objectWithoutPropertiesLoose();
var React = __toESM(require_react());
init_clsx();
var import_prop_types = __toESM(require_prop_types());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var _excluded = ["active", "completed", "className", "component", "children", "disabled", "orientation", "indicator", "slots", "slotProps"];
var useUtilityClasses = (ownerState) => {
  const {
    orientation,
    active,
    completed,
    disabled
  } = ownerState;
  const slots = {
    root: ["root", orientation, active && "active", completed && "completed", disabled && "disabled"],
    indicator: ["indicator"]
  };
  return composeClasses(slots, getStepUtilityClass, {});
};
var StepRoot = styled_default("li", {
  name: "JoyStep",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme
}) => {
  return {
    position: "relative",
    display: "flex",
    gridTemplateColumns: "var(--Stepper-indicatorColumn) 1fr",
    // for vertical stepper. has no effect on horizontal stepper.
    gridAutoFlow: "dense",
    flex: "var(--_Step-flex)",
    flexDirection: "row",
    alignItems: "var(--_Step-alignItems, center)",
    justifyContent: "var(--_Step-justify, center)",
    gap: `var(--Step-gap)`,
    "& > *": {
      zIndex: 1,
      [`&:not(.${stepClasses_default.indicator})`]: {
        gridColumn: "2"
      }
    },
    "&::after": {
      content: '""',
      display: "block",
      borderRadius: "var(--Step-connectorRadius)",
      height: `var(--Step-connectorThickness)`,
      background: `var(--Step-connectorBg, ${theme.vars.palette.divider})`,
      flex: 1,
      marginInlineStart: `calc(var(--Step-connectorInset) - var(--Step-gap))`,
      marginInlineEnd: `var(--Step-connectorInset)`,
      zIndex: 0
    },
    "&[data-last-child]::after": {
      display: "none"
    },
    [`.${stepperClasses_default.horizontal} &:not([data-last-child])`]: {
      "--_Step-flex": "auto",
      // requires to be `auto` to make equally connectors.
      [`&.${stepClasses_default.vertical}`]: {
        "--_Step-flex": 1
        // requires to be `1` to make equally connectors.
      }
    },
    [`.${stepperClasses_default.vertical} &`]: {
      display: "grid",
      "--_Step-justify": "flex-start",
      "&::after": {
        gridColumn: "1",
        width: `var(--Step-connectorThickness)`,
        height: "auto",
        margin: `calc(var(--Step-connectorInset) - var(--Step-gap)) auto calc(var(--Step-connectorInset) - var(--Stepper-verticalGap))`,
        alignSelf: "stretch"
      }
    },
    variants: [{
      props: {
        orientation: "vertical"
      },
      style: {
        flexDirection: "column",
        [`.${stepperClasses_default.horizontal} &`]: {
          "&[data-last-child]": {
            // for horizontal stepper, all vertical steps must have flex `1` to stretch equally.
            "--_Step-flex": 1
          },
          "&[data-indicator]": {
            "--_Step-justify": "flex-start"
          },
          "&::after": {
            margin: 0,
            position: "absolute",
            height: `var(--Step-connectorThickness)`,
            zIndex: 0,
            top: `calc(var(--StepIndicator-size) / 2 - var(--Step-connectorThickness) / 2)`,
            left: `calc(50% + var(--StepIndicator-size) / 2 + var(--Step-connectorInset))`,
            width: `calc(100% - var(--StepIndicator-size) - 2 * var(--Step-connectorInset))`
          },
          // Eventhough `:has` is <90% support, we can use it because this is an edge case for vertical step without an indicator.
          [`&:has(.${stepClasses_default.indicator}:empty)::after`]: {
            "--StepIndicator-size": "0px",
            "--Step-connectorInset": "0px",
            top: `calc(50% - var(--Step-connectorThickness) / 2)`
          }
        }
      }
    }]
  };
});
var StepIndicator = styled_default("div", {
  name: "JoyStep",
  slot: "Indicator",
  overridesResolver: (props, styles) => styles.root
})({
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  placeSelf: "center",
  // for vertical stepper
  width: `var(--StepIndicator-size)`,
  height: `var(--StepIndicator-size)`,
  [`.${stepperClasses_default.horizontal} &:empty`]: {
    display: "none"
  },
  [`.${stepperClasses_default.vertical} &:empty`]: {
    height: "auto",
    "&::before": {
      content: '""',
      display: "block",
      width: "var(--Step-indicatorDotSize)",
      height: "var(--Step-indicatorDotSize)",
      borderRadius: "var(--Step-indicatorDotSize)",
      color: "inherit",
      background: "currentColor"
    }
  }
});
var Step = React.forwardRef(function Step2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyStep"
  });
  const {
    active = false,
    completed = false,
    className,
    component = "li",
    children,
    disabled = false,
    orientation = "horizontal",
    indicator,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  const ownerState = _extends({}, props, {
    active,
    completed,
    component,
    disabled,
    orientation
  });
  const classes = useUtilityClasses(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: StepRoot,
    externalForwardedProps,
    ownerState,
    additionalProps: {
      "data-indicator": indicator ? "" : void 0
    }
  });
  const [SlotIndicator, indicatorProps] = useSlot("indicator", {
    ref,
    className: classes.indicator,
    elementType: StepIndicator,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime.jsxs)(SlotRoot, _extends({}, rootProps, {
    children: [(0, import_jsx_runtime.jsx)(SlotIndicator, _extends({}, indicatorProps, {
      children: indicator
    })), children]
  }));
});
true ? Step.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * If `true`, the active className is appended.
   * You can customize the active state from the Stepper's `sx` prop.
   * @default false
   */
  active: import_prop_types.default.bool,
  /**
   * Used to render icon or text elements inside the Step if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types.default.node,
  /**
   * @ignore
   */
  className: import_prop_types.default.string,
  /**
   * If `true`, the completed className is appended.
   * You can customize the active state from the Stepper's `sx` prop.
   * @default false
   */
  completed: import_prop_types.default.bool,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types.default.elementType,
  /**
   * If `true`, the active className is appended.
   * You can customize the active state from the Stepper's `sx` prop.
   * @default false
   */
  disabled: import_prop_types.default.bool,
  /**
   * The indicator to display. If provided, a wrapper element will be used.
   */
  indicator: import_prop_types.default.node,
  /**
   * The component orientation.
   * @default 'horizontal'
   */
  orientation: import_prop_types.default.oneOf(["horizontal", "vertical"]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types.default.shape({
    indicator: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object]),
    root: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types.default.shape({
    indicator: import_prop_types.default.elementType,
    root: import_prop_types.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object])
} : void 0;
var Step_default = Step;

export {
  Step_default
};
//# sourceMappingURL=chunk-SHLKYSJO.js.map
