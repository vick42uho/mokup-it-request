import {
  StyledIconButton
} from "./chunk-UG5YAQ2W.js";
import {
  StyledInputEndDecorator,
  StyledInputHtml,
  StyledInputRoot,
  StyledInputStartDecorator
} from "./chunk-FSZJP6FG.js";
import {
  ListItem_default,
  ListSubheaderContext_default
} from "./chunk-3MEFGY6S.js";
import {
  createSvgIcon
} from "./chunk-WG7PHQ7D.js";
import {
  ListProvider_default,
  List_default,
  StyledList,
  listClasses_default,
  scopedVariables
} from "./chunk-OX6ENTI6.js";
import {
  StyledListItemButton
} from "./chunk-TKKHOAZ6.js";
import {
  listItemClasses_default
} from "./chunk-SDFY7SNK.js";
import {
  INVERTED_COLORS_ATTR
} from "./chunk-D6XMNNUQ.js";
import {
  ChipContext_default,
  Chip_default
} from "./chunk-XVC57NAJ.js";
import {
  VariantColorProvider,
  getChildVariantAndColor,
  useVariantColor
} from "./chunk-SHVKKCDS.js";
import {
  Popper,
  useAutocomplete
} from "./chunk-MDKFWEZR.js";
import {
  useButton
} from "./chunk-P442FXTU.js";
import {
  FormControlContext_default
} from "./chunk-4FIU43RP.js";
import {
  useSlot
} from "./chunk-ZAJVZVHR.js";
import {
  styled_default,
  useThemeProps
} from "./chunk-QXF7ZQLR.js";
import {
  capitalize,
  chainPropTypes,
  composeClasses,
  generateUtilityClass2 as generateUtilityClass,
  generateUtilityClasses2 as generateUtilityClasses,
  integerPropType_default,
  useForkRef,
  useId
} from "./chunk-FV5AHGPT.js";
import {
  _extends,
  _objectWithoutPropertiesLoose,
  clsx_default,
  init_clsx,
  init_extends,
  init_objectWithoutPropertiesLoose,
  require_prop_types
} from "./chunk-G4QZBI3F.js";
import {
  require_jsx_runtime
} from "./chunk-DFRVR3IJ.js";
import {
  __toESM,
  require_react
} from "./chunk-VEEUVK2K.js";

// node_modules/@mui/joy/Autocomplete/Autocomplete.js
init_objectWithoutPropertiesLoose();
init_extends();
var React8 = __toESM(require_react());
var import_prop_types5 = __toESM(require_prop_types());
init_clsx();

// node_modules/@mui/joy/internal/svg-icons/Close.js
var React = __toESM(require_react());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var Close_default = createSvgIcon((0, import_jsx_runtime.jsx)("path", {
  d: "M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
}), "Close");

// node_modules/@mui/joy/internal/svg-icons/ArrowDropDown.js
var React2 = __toESM(require_react());
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var ArrowDropDown_default = createSvgIcon((0, import_jsx_runtime2.jsx)("path", {
  d: "M7 10l5 5 5-5z"
}), "ArrowDropDown");

// node_modules/@mui/joy/ChipDelete/ChipDelete.js
init_extends();
init_objectWithoutPropertiesLoose();
var React4 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());

// node_modules/@mui/joy/internal/svg-icons/Cancel.js
var React3 = __toESM(require_react());
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var Cancel_default = createSvgIcon((0, import_jsx_runtime3.jsx)("path", {
  d: "M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
}), "Cancel");

// node_modules/@mui/joy/ChipDelete/chipDeleteClasses.js
function getChipDeleteUtilityClass(slot) {
  return generateUtilityClass("MuiChipDelete", slot);
}
var chipDeleteClasses = generateUtilityClasses("MuiChipDelete", ["root", "disabled", "focusVisible", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantSolid", "variantSoft", "variantOutlined"]);
var chipDeleteClasses_default = chipDeleteClasses;

// node_modules/@mui/joy/ChipDelete/ChipDelete.js
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
var _Cancel;
var _excluded = ["children", "variant", "color", "disabled", "onKeyDown", "onDelete", "onClick", "component", "slots", "slotProps"];
var _excluded2 = ["onDelete"];
var useUtilityClasses = (ownerState) => {
  const {
    focusVisible,
    variant,
    color,
    disabled
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", focusVisible && "focusVisible", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`]
  };
  return composeClasses(slots, getChipDeleteUtilityClass, {});
};
var ChipDeleteRoot = styled_default(StyledIconButton, {
  name: "JoyChipDelete",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme
}) => ({
  "--IconButton-size": "var(--Chip-deleteSize, 2rem)",
  "--Icon-fontSize": "calc(var(--IconButton-size, 2rem) / 1.3)",
  minWidth: "var(--IconButton-size, 2rem)",
  // use min-width instead of height to make the button resilient to its content
  minHeight: "var(--IconButton-size, 2rem)",
  // use min-height instead of height to make the button resilient to its content
  fontSize: theme.vars.fontSize.sm,
  paddingInline: "2px",
  // add a gap, in case the content is long, for example multiple icons
  pointerEvents: "visible",
  // force the ChipDelete to be hoverable because the decorator can have pointerEvents 'none'
  borderRadius: "var(--Chip-deleteRadius, 50%)",
  zIndex: 1,
  // overflow above sibling button or anchor
  padding: 0
  // reset user agent stylesheet
}));
var ChipDelete = React4.forwardRef(function ChipDelete2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyChipDelete"
  });
  const {
    children,
    variant: variantProp = "plain",
    color: colorProp = "neutral",
    disabled: disabledProp,
    onKeyDown,
    onDelete,
    onClick,
    component,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  const chipContext = React4.useContext(ChipContext_default);
  const {
    variant = variantProp,
    color: inheritedColor = colorProp
  } = useVariantColor(inProps.variant, inProps.color, true);
  const color = inProps.color || inheritedColor;
  const disabled = disabledProp ?? chipContext.disabled;
  const buttonRef = React4.useRef(null);
  const handleRef = useForkRef(buttonRef, ref);
  const {
    focusVisible,
    getRootProps
  } = useButton(_extends({}, props, {
    disabled,
    rootRef: handleRef
  }));
  const ownerState = _extends({}, props, {
    disabled,
    variant,
    color,
    focusVisible
  });
  const classes = useUtilityClasses(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const handleClickDelete = (event) => {
    if (!disabled && onDelete) {
      onDelete(event);
    }
    if (onClick) {
      onClick(event);
    }
  };
  const handleKeyDelete = (event) => {
    if (["Backspace", "Enter", "Delete"].includes(event.key)) {
      event.preventDefault();
      if (!disabled && onDelete) {
        onDelete(event);
      }
    }
    if (onKeyDown) {
      onKeyDown(event);
    }
  };
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    elementType: ChipDeleteRoot,
    getSlotProps: getRootProps,
    externalForwardedProps,
    ownerState,
    additionalProps: {
      as: component,
      onKeyDown: handleKeyDelete,
      onClick: handleClickDelete
    },
    className: classes.root
  });
  const restOfRootProps = _objectWithoutPropertiesLoose(rootProps, _excluded2);
  return (0, import_jsx_runtime4.jsx)(SlotRoot, _extends({}, restOfRootProps, {
    children: children ?? (_Cancel || (_Cancel = (0, import_jsx_runtime4.jsx)(Cancel_default, {})))
  }));
});
true ? ChipDelete.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * If provided, it will replace the default icon.
   */
  children: import_prop_types.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types.default.elementType,
  /**
   * If `true`, the component is disabled.
   * If `undefined`, the value inherits from the parent chip via a React context.
   */
  disabled: import_prop_types.default.bool,
  /**
   * @ignore
   */
  onClick: import_prop_types.default.func,
  /**
   * Callback fired when the component is not disabled and either:
   * - `Backspace`, `Enter` or `Delete` is pressed.
   * - The component is clicked.
   */
  onDelete: import_prop_types.default.func,
  /**
   * @ignore
   */
  onKeyDown: import_prop_types.default.func,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types.default.shape({
    root: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types.default.shape({
    root: import_prop_types.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types.default.string])
} : void 0;
var ChipDelete_default = ChipDelete;

// node_modules/@mui/joy/ListSubheader/ListSubheader.js
init_objectWithoutPropertiesLoose();
init_extends();
var React5 = __toESM(require_react());
var import_prop_types2 = __toESM(require_prop_types());
init_clsx();

// node_modules/@mui/joy/ListSubheader/listSubheaderClasses.js
function getListSubheaderUtilityClass(slot) {
  return generateUtilityClass("MuiListSubheader", slot);
}
var listSubheaderClasses = generateUtilityClasses("MuiListSubheader", ["root", "sticky", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantSoft", "variantOutlined", "variantSolid"]);
var listSubheaderClasses_default = listSubheaderClasses;

// node_modules/@mui/joy/ListSubheader/ListSubheader.js
var import_jsx_runtime5 = __toESM(require_jsx_runtime());
var _excluded3 = ["component", "className", "children", "id", "sticky", "variant", "color", "slots", "slotProps"];
var useUtilityClasses2 = (ownerState) => {
  const {
    variant,
    color,
    sticky
  } = ownerState;
  const slots = {
    root: ["root", sticky && "sticky", color && `color${capitalize(color)}`, variant && `variant${capitalize(variant)}`]
  };
  return composeClasses(slots, getListSubheaderUtilityClass, {});
};
var ListSubheaderRoot = styled_default("div", {
  name: "JoyListSubheader",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _a, _b;
  return _extends({
    boxSizing: "border-box",
    display: "flex",
    alignItems: "center",
    marginInline: "var(--ListItem-marginInline)",
    paddingBlock: "var(--ListItem-paddingY)",
    paddingInlineStart: "var(--ListItem-paddingLeft)",
    paddingInlineEnd: "var(--ListItem-paddingRight)",
    minBlockSize: "var(--ListItem-minHeight)"
  }, theme.typography["body-xs"], {
    fontSize: "max(0.75em, 0.625rem)",
    textTransform: "uppercase",
    letterSpacing: "0.1em"
  }, ownerState.sticky && {
    position: "sticky",
    top: "var(--ListItem-stickyTop, 0px)",
    // integration with Menu and Select.
    zIndex: 1,
    background: "var(--ListItem-stickyBackground)"
  }, {
    color: ownerState.color ? `var(--_Link-color, rgba(${(_a = theme.vars.palette[ownerState.color]) == null ? void 0 : _a.mainChannel} / 1))` : theme.vars.palette.text.tertiary
  }, ownerState.instanceColor && {
    [`&:not([${INVERTED_COLORS_ATTR}])`]: {
      "--_Link-color": theme.vars.palette.text.secondary
    }
  }, (_b = theme.variants[ownerState.variant]) == null ? void 0 : _b[ownerState.color]);
});
var ListSubheader = React5.forwardRef(function ListSubheader2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyListSubheader"
  });
  const {
    component,
    className,
    children,
    id: idOverride,
    sticky = false,
    variant,
    color,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded3);
  const id = useId(idOverride);
  const setSubheaderId = React5.useContext(ListSubheaderContext_default);
  React5.useEffect(() => {
    if (setSubheaderId) {
      setSubheaderId(id || "");
    }
  }, [setSubheaderId, id]);
  const ownerState = _extends({
    instanceColor: inProps.color
  }, props, {
    id,
    sticky,
    variant,
    color: variant ? color ?? "neutral" : color
  });
  const classes = useUtilityClasses2(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: ListSubheaderRoot,
    externalForwardedProps,
    ownerState,
    additionalProps: {
      as: component,
      id
    }
  });
  return (0, import_jsx_runtime5.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? ListSubheader.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types2.default.node,
  /**
   * @ignore
   */
  className: import_prop_types2.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   */
  color: import_prop_types2.default.oneOfType([import_prop_types2.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types2.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types2.default.elementType,
  /**
   * @ignore
   */
  id: import_prop_types2.default.string,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types2.default.shape({
    root: import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types2.default.shape({
    root: import_prop_types2.default.elementType
  }),
  /**
   * If `true`, the component has sticky position (with top = 0).
   * @default false
   */
  sticky: import_prop_types2.default.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types2.default.oneOfType([import_prop_types2.default.arrayOf(import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.object, import_prop_types2.default.bool])), import_prop_types2.default.func, import_prop_types2.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   */
  variant: import_prop_types2.default.oneOfType([import_prop_types2.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types2.default.string])
} : void 0;
var ListSubheader_default = ListSubheader;

// node_modules/@mui/joy/Autocomplete/autocompleteClasses.js
function getAutocompleteUtilityClass(slot) {
  return generateUtilityClass("MuiAutocomplete", slot);
}
var autocompleteClasses = generateUtilityClasses("MuiAutocomplete", ["root", "wrapper", "input", "startDecorator", "endDecorator", "formControl", "focused", "disabled", "error", "multiple", "limitTag", "hasPopupIcon", "hasClearIcon", "clearIndicator", "popupIndicator", "popupIndicatorOpen", "listbox", "option", "loading", "noOptions", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "sizeSm", "sizeMd", "sizeLg", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var autocompleteClasses_default = autocompleteClasses;

// node_modules/@mui/joy/AutocompleteListbox/AutocompleteListbox.js
init_extends();
init_objectWithoutPropertiesLoose();
var React6 = __toESM(require_react());
init_clsx();
var import_prop_types3 = __toESM(require_prop_types());

// node_modules/@mui/joy/AutocompleteListbox/autocompleteListboxClasses.js
function getAutocompleteListboxUtilityClass(slot) {
  return generateUtilityClass("MuiAutocompleteListbox", slot);
}
var autocompleteListboxClasses = generateUtilityClasses("MuiAutocompleteListbox", ["root", "sizeSm", "sizeMd", "sizeLg", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var autocompleteListboxClasses_default = autocompleteListboxClasses;

// node_modules/@mui/joy/AutocompleteListbox/AutocompleteListbox.js
var import_jsx_runtime6 = __toESM(require_jsx_runtime());
var _excluded4 = ["anchorEl", "direction", "disablePortal", "keepMounted", "modifiers", "open", "placement", "popperOptions", "popperRef", "TransitionProps"];
var _excluded22 = ["children", "className", "component", "color", "variant", "size", "slots", "slotProps"];
var useUtilityClasses3 = (ownerState) => {
  const {
    variant,
    color,
    size
  } = ownerState;
  const slots = {
    root: ["root", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`]
  };
  return composeClasses(slots, getAutocompleteListboxUtilityClass, {});
};
var excludePopperProps = (_ref) => {
  let other = _objectWithoutPropertiesLoose(_ref, _excluded4);
  return other;
};
var StyledAutocompleteListbox = styled_default(StyledList)(({
  theme,
  ownerState
}) => {
  var _a;
  const variantStyle = (_a = theme.variants[ownerState.variant]) == null ? void 0 : _a[ownerState.color];
  return _extends({
    "--focus-outline-offset": `calc(${theme.vars.focus.thickness} * -1)`,
    // to prevent the focus outline from being cut by overflow
    "--ListItem-stickyBackground": (variantStyle == null ? void 0 : variantStyle.backgroundColor) || (variantStyle == null ? void 0 : variantStyle.background) || theme.vars.palette.background.popup,
    "--ListItem-stickyTop": "calc(var(--List-padding, var(--ListDivider-gap)) * -1)"
  }, scopedVariables, {
    boxShadow: theme.shadow.md,
    borderRadius: `var(--List-radius, ${theme.vars.radius.sm})`
  }, !(variantStyle == null ? void 0 : variantStyle.backgroundColor) && {
    backgroundColor: theme.vars.palette.background.popup
  }, {
    zIndex: theme.vars.zIndex.popup,
    overflow: "auto",
    maxHeight: "40vh",
    position: "relative",
    // to make sure that the listbox is positioned for grouped options to work.
    "&:empty": {
      visibility: "hidden"
    },
    [`& .${listItemClasses_default.nested}, & .${listItemClasses_default.nested} .${listClasses_default.root}`]: {
      // For grouped options autocomplete:
      // Force the position to make the scroll into view logic works because the `element.offsetTop` should reference to the listbox, not the grouped list.
      // See the implementation of the `useAutocomplete` line:370
      //
      // Resource: https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetTop
      position: "initial"
    }
  });
});
var AutocompleteListboxRoot = styled_default(StyledAutocompleteListbox, {
  name: "JoyAutocompleteListbox",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})({});
var AutocompleteListbox = React6.forwardRef(function AutocompleteListbox2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyAutocompleteListbox"
  });
  const {
    children,
    className,
    component,
    color = "neutral",
    variant = "outlined",
    size = "md",
    slots = {},
    slotProps = {}
  } = props, otherProps = _objectWithoutPropertiesLoose(props, _excluded22);
  const ownerState = _extends({}, props, {
    size,
    color,
    variant,
    nesting: false,
    row: false,
    wrap: false
  });
  const other = excludePopperProps(otherProps);
  const classes = useUtilityClasses3(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: AutocompleteListboxRoot,
    externalForwardedProps,
    ownerState,
    additionalProps: {
      role: "listbox"
    }
  });
  return (0, import_jsx_runtime6.jsx)(VariantColorProvider, {
    variant,
    color,
    children: (0, import_jsx_runtime6.jsx)(SlotRoot, _extends({}, rootProps, {
      children
    }))
  });
});
true ? AutocompleteListbox.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: import_prop_types3.default.node,
  /**
   * @ignore
   */
  className: import_prop_types3.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types3.default.oneOfType([import_prop_types3.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types3.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types3.default.elementType,
  /**
   * The size of the component (affect other nested list* components).
   * @default 'md'
   */
  size: import_prop_types3.default.oneOf(["sm", "md", "lg"]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types3.default.shape({
    root: import_prop_types3.default.oneOfType([import_prop_types3.default.func, import_prop_types3.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types3.default.shape({
    root: import_prop_types3.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types3.default.oneOfType([import_prop_types3.default.arrayOf(import_prop_types3.default.oneOfType([import_prop_types3.default.func, import_prop_types3.default.object, import_prop_types3.default.bool])), import_prop_types3.default.func, import_prop_types3.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'outlined'
   */
  variant: import_prop_types3.default.oneOfType([import_prop_types3.default.oneOf(["contained", "light", "outlined", "text"]), import_prop_types3.default.string])
} : void 0;
var AutocompleteListbox_default = AutocompleteListbox;

// node_modules/@mui/joy/AutocompleteOption/AutocompleteOption.js
init_objectWithoutPropertiesLoose();
init_extends();
var React7 = __toESM(require_react());
init_clsx();
var import_prop_types4 = __toESM(require_prop_types());

// node_modules/@mui/joy/AutocompleteOption/autocompleteOptionClasses.js
function getAutocompleteOptionUtilityClass(slot) {
  return generateUtilityClass("MuiAutocompleteOption", slot);
}
var autocompleteOptionClasses = generateUtilityClasses("MuiAutocompleteOption", ["root", "focused", "focusVisible", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantSoft", "variantOutlined", "variantSolid"]);
var autocompleteOptionClasses_default = autocompleteOptionClasses;

// node_modules/@mui/joy/AutocompleteOption/AutocompleteOption.js
var import_jsx_runtime7 = __toESM(require_jsx_runtime());
var _excluded5 = ["children", "component", "color", "variant", "className", "slots", "slotProps"];
var useUtilityClasses4 = (ownerState) => {
  const {
    color,
    variant
  } = ownerState;
  const slots = {
    root: ["root", color && `color${capitalize(color)}`, variant && `variant${capitalize(variant)}`]
  };
  return composeClasses(slots, getAutocompleteOptionUtilityClass, {});
};
var StyledAutocompleteOption = styled_default(StyledListItemButton)(({
  theme,
  ownerState
}) => {
  var _a, _b;
  return {
    '&[aria-disabled="true"]': (_a = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _a[ownerState.color],
    '&[aria-selected="true"]': _extends({}, (_b = theme.variants[`${ownerState.variant}Active`]) == null ? void 0 : _b[ownerState.color], {
      fontWeight: theme.vars.fontWeight.md
    })
  };
});
var AutocompleteOptionRoot = styled_default(StyledAutocompleteOption, {
  name: "JoyAutocompleteOption",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})({});
var AutocompleteOption = React7.forwardRef(function AutocompleteOption2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyAutocompleteOption"
  });
  const {
    children,
    component = "li",
    color: colorProp = "neutral",
    variant: variantProp = "plain",
    className,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded5);
  const {
    variant = variantProp,
    color = colorProp
  } = useVariantColor(inProps.variant, inProps.color);
  const ownerState = _extends({}, props, {
    component,
    color,
    variant
  });
  const classes = useUtilityClasses4(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: AutocompleteOptionRoot,
    externalForwardedProps,
    ownerState,
    additionalProps: {
      as: component,
      role: "option"
    }
  });
  return (0, import_jsx_runtime7.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? AutocompleteOption.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: import_prop_types4.default.node,
  /**
   * @ignore
   */
  className: import_prop_types4.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types4.default.oneOfType([import_prop_types4.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types4.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types4.default.elementType,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types4.default.shape({
    root: import_prop_types4.default.oneOfType([import_prop_types4.default.func, import_prop_types4.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types4.default.shape({
    root: import_prop_types4.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types4.default.oneOfType([import_prop_types4.default.arrayOf(import_prop_types4.default.oneOfType([import_prop_types4.default.func, import_prop_types4.default.object, import_prop_types4.default.bool])), import_prop_types4.default.func, import_prop_types4.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types4.default.oneOfType([import_prop_types4.default.oneOf(["contained", "light", "outlined", "text"]), import_prop_types4.default.string])
} : void 0;
var AutocompleteOption_default = AutocompleteOption;

// node_modules/@mui/joy/Autocomplete/Autocomplete.js
var import_jsx_runtime8 = __toESM(require_jsx_runtime());
var _ClearIcon;
var _ArrowDropDownIcon;
var _excluded6 = ["aria-describedby", "aria-label", "aria-labelledby", "autoComplete", "autoHighlight", "autoSelect", "autoFocus", "blurOnSelect", "clearIcon", "clearOnBlur", "clearOnEscape", "clearText", "closeText", "defaultValue", "disableCloseOnSelect", "disabledItemsFocusable", "disableListWrap", "disableClearable", "disabled", "endDecorator", "error", "filterOptions", "filterSelectedOptions", "forcePopupIcon", "freeSolo", "getLimitTagsText", "getOptionDisabled", "getOptionKey", "getOptionLabel", "handleHomeEndKeys", "includeInputInList", "isOptionEqualToValue", "groupBy", "id", "inputValue", "limitTags", "loading", "loadingText", "multiple", "name", "noOptionsText", "onChange", "onClose", "onHighlightChange", "onInputChange", "onOpen", "open", "openOnFocus", "openText", "options", "placeholder", "popupIcon", "readOnly", "renderGroup", "renderOption", "renderTags", "required", "type", "startDecorator", "size", "color", "variant", "value", "component", "selectOnFocus", "slots", "slotProps"];
var _excluded23 = ["onDelete"];
var _excluded32 = ["onBlur", "onFocus", "onMouseDown"];
var defaultIsActiveElementInListbox = (listboxRef) => listboxRef.current !== null && listboxRef.current.contains(document.activeElement);
var defaultGetOptionLabel = (option) => option.label ?? option;
var defaultLimitTagsText = (more) => `+${more}`;
var defaultRenderGroup = (params) => (0, import_jsx_runtime8.jsxs)(ListItem_default, {
  nested: true,
  children: [(0, import_jsx_runtime8.jsx)(ListSubheader_default, {
    sticky: true,
    children: params.group
  }), (0, import_jsx_runtime8.jsx)(List_default, {
    children: params.children
  })]
}, params.key);
var useUtilityClasses5 = (ownerState) => {
  const {
    disabled,
    focused,
    hasClearIcon,
    hasPopupIcon,
    popupOpen,
    variant,
    color,
    size,
    multiple
  } = ownerState;
  const slots = {
    root: ["root", focused && "focused", hasClearIcon && "hasClearIcon", hasPopupIcon && "hasPopupIcon", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`],
    wrapper: ["wrapper", multiple && "multiple"],
    input: ["input"],
    startDecorator: ["startDecorator"],
    endDecorator: ["endDecorator"],
    clearIndicator: ["clearIndicator"],
    popupIndicator: ["popupIndicator", popupOpen && "popupIndicatorOpen", disabled && "disabled"],
    listbox: ["listbox"],
    option: ["option"],
    loading: ["loading"],
    noOptions: ["noOptions"],
    limitTag: ["limitTag"]
  };
  return composeClasses(slots, getAutocompleteUtilityClass, {});
};
var AutocompleteRoot = styled_default(StyledInputRoot, {
  name: "JoyAutocomplete",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  ownerState
}) => _extends({}, ownerState.size === "sm" && {
  "--Autocomplete-wrapperGap": "3px"
}, ownerState.size === "md" && {
  "--Autocomplete-wrapperGap": "3px"
}, ownerState.size === "lg" && {
  "--Autocomplete-wrapperGap": "4px"
}, {
  /* Avoid double tap issue on iOS */
  "@media (pointer: fine)": {
    [`&:hover .${autocompleteClasses_default.clearIndicator}`]: {
      visibility: "visible"
    }
  }
}, ownerState.multiple && !ownerState.startDecorator && {
  paddingInlineStart: 0
}));
var AutocompleteWrapper = styled_default("div", {
  name: "JoyAutocomplete",
  slot: "Wrapper",
  overridesResolver: (props, styles) => styles.wrapper
})(({
  ownerState
}) => ({
  flex: 1,
  // stretch to fill the root slot
  minWidth: 0,
  // won't push end decorator out of the autocomplete
  display: "flex",
  alignItems: "center",
  flexWrap: "wrap",
  gap: "var(--Autocomplete-wrapperGap)",
  [`&.${autocompleteClasses_default.multiple}`]: _extends({
    paddingBlock: "var(--Autocomplete-wrapperGap)"
  }, !ownerState.startDecorator && {
    paddingInlineStart: "var(--Autocomplete-wrapperGap)"
  }, !ownerState.endDecorator && {
    paddingInlineEnd: "var(--Autocomplete-wrapperGap)"
  })
}));
var AutocompleteInput = styled_default(StyledInputHtml, {
  name: "JoyAutocomplete",
  slot: "Input",
  overridesResolver: (props, styles) => styles.input
})(({
  ownerState
}) => _extends({
  minWidth: 30,
  minHeight: "var(--Chip-minHeight)"
}, ownerState.multiple && {
  marginInlineStart: "calc(var(--Autocomplete-wrapperGap) * 2.5)"
}));
var AutocompleteStartDecorator = styled_default(StyledInputStartDecorator, {
  name: "JoyAutocomplete",
  slot: "StartDecorator",
  overridesResolver: (props, styles) => styles.startDecorator
})({});
var AutocompleteEndDecorator = styled_default(StyledInputEndDecorator, {
  name: "JoyAutocomplete",
  slot: "EndDecorator",
  overridesResolver: (props, styles) => styles.endDecorator
})(({
  ownerState
}) => _extends({}, (ownerState.hasClearIcon || ownerState.hasPopupIcon) && {
  "--Button-margin": "0px",
  "--IconButton-margin": "0px",
  "--Icon-margin": "0px"
}));
var AutocompleteClearIndicator = styled_default(StyledIconButton, {
  name: "JoyAutocomplete",
  slot: "ClearIndicator",
  overridesResolver: (props, styles) => styles.clearIndicator
})(({
  ownerState
}) => _extends({
  alignSelf: "center"
}, !ownerState.hasPopupIcon && {
  marginInlineEnd: "calc(var(--Input-decoratorChildOffset) * -1)"
}, {
  marginInlineStart: "calc(var(--_Input-paddingBlock) / 2)",
  visibility: ownerState.focused ? "visible" : "hidden"
}));
var AutocompletePopupIndicator = styled_default(StyledIconButton, {
  name: "JoyAutocomplete",
  slot: "PopupIndicator",
  overridesResolver: (props, styles) => styles.popupIndicator
})({
  alignSelf: "center",
  marginInlineStart: "calc(var(--_Input-paddingBlock) / 2)",
  marginInlineEnd: "calc(var(--Input-decoratorChildOffset) * -1)",
  [`&.${autocompleteClasses_default.popupIndicatorOpen}`]: {
    transform: "rotate(180deg)",
    "--Icon-color": "currentColor"
  }
});
var AutocompleteListbox3 = styled_default(StyledAutocompleteListbox, {
  name: "JoyAutocomplete",
  slot: "Listbox",
  overridesResolver: (props, styles) => styles.listbox
})(({
  theme
}) => ({
  // `unstable_popup-zIndex` is a private variable that lets other component, for example Modal, to override the z-index so that the listbox can be displayed above the Modal.
  zIndex: `var(--unstable_popup-zIndex, ${theme.vars.zIndex.popup})`
}));
var AutocompleteOption3 = styled_default(StyledAutocompleteOption, {
  name: "JoyAutocomplete",
  slot: "Option",
  overridesResolver: (props, styles) => styles.option
})({});
var AutocompleteLoading = styled_default(ListItem_default, {
  name: "JoyAutocomplete",
  slot: "Loading",
  overridesResolver: (props, styles) => styles.loading
})(({
  theme
}) => ({
  color: (theme.vars || theme).palette.text.secondary
}));
var AutocompleteNoOptions = styled_default(ListItem_default, {
  name: "JoyAutocomplete",
  slot: "NoOptions",
  overridesResolver: (props, styles) => styles.noOptions
})(({
  theme
}) => ({
  color: (theme.vars || theme).palette.text.secondary
}));
var AutocompleteLimitTag = styled_default("div", {
  name: "JoyAutocomplete",
  slot: "NoOptions",
  overridesResolver: (props, styles) => styles.noOptions
})({
  marginInlineStart: "calc(var(--Input-paddingInline) / 2)",
  marginBlockStart: "var(--_Input-paddingBlock)"
});
var Autocomplete = React8.forwardRef(function Autocomplete2(inProps, ref) {
  var _a;
  const props = useThemeProps({
    props: inProps,
    name: "JoyAutocomplete"
  });
  const {
    "aria-describedby": ariaDescribedby,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledby,
    autoFocus,
    clearIcon = _ClearIcon || (_ClearIcon = (0, import_jsx_runtime8.jsx)(Close_default, {
      fontSize: "md"
    })),
    clearText = "Clear",
    closeText = "Close",
    disableClearable = false,
    disabled: disabledProp,
    endDecorator,
    error: errorProp = false,
    forcePopupIcon = "auto",
    freeSolo = false,
    getLimitTagsText = defaultLimitTagsText,
    getOptionLabel = defaultGetOptionLabel,
    groupBy,
    id,
    limitTags = -1,
    loading = false,
    loadingText = "Loading…",
    multiple = false,
    name,
    noOptionsText = "No options",
    openText = "Open",
    placeholder,
    popupIcon = _ArrowDropDownIcon || (_ArrowDropDownIcon = (0, import_jsx_runtime8.jsx)(ArrowDropDown_default, {})),
    readOnly = false,
    renderGroup = defaultRenderGroup,
    renderOption: renderOptionProp,
    renderTags,
    required,
    type,
    startDecorator,
    size: sizeProp = "md",
    color: colorProp = "neutral",
    variant = "outlined",
    component,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded6);
  const formControl = React8.useContext(FormControlContext_default);
  const error = inProps.error ?? (formControl == null ? void 0 : formControl.error) ?? errorProp;
  const size = inProps.size ?? (formControl == null ? void 0 : formControl.size) ?? sizeProp;
  const color = inProps.color ?? (error ? "danger" : (formControl == null ? void 0 : formControl.color) ?? colorProp);
  const disabled = disabledProp ?? (formControl == null ? void 0 : formControl.disabled) ?? false;
  const {
    getRootProps,
    getInputProps,
    getPopupIndicatorProps,
    getClearProps,
    getTagProps,
    getListboxProps,
    getOptionProps,
    value,
    dirty,
    popupOpen,
    focused,
    focusedTag,
    anchorEl,
    setAnchorEl,
    inputValue,
    groupedOptions
  } = useAutocomplete(_extends({}, props, {
    id: id ?? (formControl == null ? void 0 : formControl.htmlFor),
    componentName: "Autocomplete",
    unstable_classNamePrefix: "Mui",
    unstable_isActiveElementInListbox: defaultIsActiveElementInListbox
  }));
  const {
    onMouseDown: handleInputMouseDown
  } = getInputProps();
  const {
    onClick: handleRootOnClick
  } = getRootProps();
  const hasClearIcon = !disableClearable && !disabled && dirty && !readOnly;
  const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;
  const ownerState = _extends({
    instanceColor: inProps.color
  }, props, {
    value,
    disabled,
    focused,
    getOptionLabel,
    hasOptions: !!groupedOptions.length,
    hasClearIcon,
    hasPopupIcon,
    inputFocused: focusedTag === -1,
    popupOpen,
    size,
    color,
    variant
  });
  const classes = useUtilityClasses5(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  let selectedOptions;
  if (multiple && value.length > 0) {
    const getCustomizedTagProps = (params) => {
      const _getTagProps = getTagProps(params), {
        onDelete
      } = _getTagProps, tagProps = _objectWithoutPropertiesLoose(_getTagProps, _excluded23);
      return _extends({
        disabled,
        size,
        onClick: onDelete
      }, tagProps);
    };
    if (renderTags) {
      selectedOptions = renderTags(value, getCustomizedTagProps, ownerState);
    } else {
      selectedOptions = value.map((option, index) => {
        return (0, import_jsx_runtime8.jsx)(Chip_default, {
          size,
          variant: "soft",
          color: "neutral",
          endDecorator: (0, import_jsx_runtime8.jsx)(ChipDelete_default, _extends({}, getCustomizedTagProps({
            index
          }))),
          sx: {
            minWidth: 0
          },
          children: getOptionLabel(option)
        }, index);
      });
    }
  }
  const rootRef = useForkRef(ref, setAnchorEl);
  const rootStateClasses = {
    [autocompleteClasses_default.disabled]: disabled,
    [autocompleteClasses_default.error]: error,
    [autocompleteClasses_default.focused]: focused,
    [autocompleteClasses_default.formControl]: Boolean(formControl)
  };
  const [SlotRoot, rootProps] = useSlot("root", {
    ref: rootRef,
    className: [classes.root, rootStateClasses],
    elementType: AutocompleteRoot,
    externalForwardedProps,
    ownerState,
    getSlotProps: getRootProps,
    additionalProps: {
      onClick: (event) => {
        if (handleRootOnClick) {
          handleRootOnClick(event);
        }
        if (event.currentTarget === event.target && handleInputMouseDown) {
          handleInputMouseDown(event);
        }
      }
    }
  });
  const [SlotWrapper, wrapperProps] = useSlot("wrapper", {
    className: classes.wrapper,
    elementType: AutocompleteWrapper,
    externalForwardedProps,
    ownerState
  });
  const inputStateClasses = {
    [autocompleteClasses_default.disabled]: disabled
  };
  const [SlotInput, inputProps] = useSlot("input", {
    className: [classes.input, inputStateClasses],
    elementType: AutocompleteInput,
    getSlotProps: (handlers) => {
      const _getInputProps = getInputProps(), {
        onBlur,
        onFocus,
        onMouseDown
      } = _getInputProps, inputSlotProps = _objectWithoutPropertiesLoose(_getInputProps, _excluded32);
      return _extends({}, inputSlotProps, {
        onBlur: (event) => {
          var _a2;
          onBlur == null ? void 0 : onBlur(event);
          (_a2 = handlers.onBlur) == null ? void 0 : _a2.call(handlers, event);
        },
        onFocus: (event) => {
          var _a2;
          onFocus == null ? void 0 : onFocus(event);
          (_a2 = handlers.onFocus) == null ? void 0 : _a2.call(handlers, event);
        },
        onMouseDown: (event) => {
          var _a2;
          onMouseDown == null ? void 0 : onMouseDown(event);
          (_a2 = handlers.onMouseDown) == null ? void 0 : _a2.call(handlers, event);
        }
      });
    },
    externalForwardedProps,
    ownerState,
    additionalProps: {
      autoFocus,
      placeholder,
      name,
      readOnly,
      disabled,
      required: required ?? (formControl == null ? void 0 : formControl.required),
      type,
      "aria-invalid": error || void 0,
      "aria-label": ariaLabel,
      "aria-labelledby": ariaLabelledby,
      "aria-describedby": ariaDescribedby ?? (formControl == null ? void 0 : formControl["aria-describedby"])
    }
  });
  const [SlotStartDecorator, startDecoratorProps] = useSlot("startDecorator", {
    className: classes.startDecorator,
    elementType: AutocompleteStartDecorator,
    externalForwardedProps,
    ownerState
  });
  const [SlotEndDecorator, endDecoratorProps] = useSlot("endDecorator", {
    className: classes.endDecorator,
    elementType: AutocompleteEndDecorator,
    externalForwardedProps,
    ownerState
  });
  const [SlotClearIndicator, clearIndicatorProps] = useSlot("clearIndicator", {
    className: classes.clearIndicator,
    elementType: AutocompleteClearIndicator,
    getSlotProps: getClearProps,
    externalForwardedProps,
    ownerState,
    getSlotOwnerState: (mergedProps) => ({
      size: mergedProps.size || size,
      variant: mergedProps.variant || getChildVariantAndColor(variant, color).variant || "plain",
      color: mergedProps.color || getChildVariantAndColor(variant, color).color || "neutral",
      disableColorInversion: !!inProps.color
    }),
    additionalProps: {
      "aria-label": clearText,
      title: clearText
    }
  });
  const [SlotPopupIndicator, popupIndicatorProps] = useSlot("popupIndicator", {
    className: classes.popupIndicator,
    elementType: AutocompletePopupIndicator,
    getSlotProps: getPopupIndicatorProps,
    externalForwardedProps,
    ownerState,
    getSlotOwnerState: (mergedProps) => ({
      size: mergedProps.size || size,
      variant: mergedProps.variant || getChildVariantAndColor(variant, color).variant || "plain",
      color: mergedProps.color || getChildVariantAndColor(variant, color).color || "neutral",
      disableColorInversion: !!inProps.color
    }),
    additionalProps: {
      disabled,
      "aria-label": popupOpen ? closeText : openText,
      title: popupOpen ? closeText : openText,
      type: "button"
    }
  });
  const [SlotListbox, listboxProps] = useSlot("listbox", {
    className: classes.listbox,
    elementType: AutocompleteListbox3,
    getSlotProps: getListboxProps,
    externalForwardedProps,
    ownerState,
    getSlotOwnerState: (mergedProps) => ({
      size: mergedProps.size || size,
      variant: mergedProps.variant || variant,
      color: mergedProps.color || color,
      disableColorInversion: !mergedProps.disablePortal
    }),
    additionalProps: {
      anchorEl,
      open: popupOpen,
      style: anchorEl ? {
        width: anchorEl.clientWidth
      } : {}
    }
  });
  const [SlotLoading, loadingProps] = useSlot("loading", {
    className: classes.loading,
    elementType: AutocompleteLoading,
    externalForwardedProps,
    ownerState
  });
  const [SlotNoOptions, noOptionsProps] = useSlot("noOptions", {
    className: classes.noOptions,
    elementType: AutocompleteNoOptions,
    externalForwardedProps,
    ownerState,
    additionalProps: {
      role: "presentation",
      onMouseDown: (event) => {
        event.preventDefault();
      }
    }
  });
  const [SlotLimitTag, limitTagProps] = useSlot("limitTag", {
    className: classes.limitTag,
    elementType: AutocompleteLimitTag,
    externalForwardedProps,
    ownerState
  });
  if (limitTags > -1 && Array.isArray(selectedOptions)) {
    const more = selectedOptions.length - limitTags;
    if (!focused && more > 0) {
      selectedOptions = selectedOptions.splice(0, limitTags);
      selectedOptions.push((0, import_jsx_runtime8.jsx)(SlotLimitTag, _extends({}, limitTagProps, {
        children: getLimitTagsText(more)
      }), selectedOptions.length));
    }
  }
  const [SlotOption, baseOptionProps] = useSlot("option", {
    className: classes.option,
    elementType: AutocompleteOption3,
    externalForwardedProps,
    ownerState,
    getSlotOwnerState: (mergedProps) => ({
      variant: mergedProps.variant || getChildVariantAndColor(variant, color).variant || "plain",
      color: mergedProps.color || getChildVariantAndColor(variant, color).color || "neutral",
      disableColorInversion: !listboxProps.disablePortal
    }),
    additionalProps: {
      as: "li"
    }
  });
  const defaultRenderOption = (optionProps, option) => (0, import_jsx_runtime8.jsx)(SlotOption, _extends({}, optionProps, {
    children: getOptionLabel(option)
  }));
  const renderOption = renderOptionProp || defaultRenderOption;
  const renderListOption = (option, index) => {
    const optionProps = getOptionProps({
      option,
      index
    });
    return renderOption(_extends({}, baseOptionProps, optionProps), option, {
      // `aria-selected` prop will always by boolean, see useAutocomplete hook.
      selected: !!optionProps["aria-selected"],
      inputValue,
      ownerState
    });
  };
  const modifiers = React8.useMemo(() => [{
    name: "offset",
    options: {
      offset: [0, 4]
    }
  }, ...listboxProps.modifiers || []], [listboxProps.modifiers]);
  let popup = null;
  if (anchorEl) {
    popup = (0, import_jsx_runtime8.jsx)(VariantColorProvider, {
      variant,
      color,
      children: (0, import_jsx_runtime8.jsx)(ListProvider_default, {
        nested: true,
        children: (0, import_jsx_runtime8.jsxs)(SlotListbox, _extends({}, listboxProps, {
          className: clsx_default(listboxProps.className),
          modifiers
        }, !((_a = props.slots) == null ? void 0 : _a.listbox) && {
          as: Popper,
          slots: {
            root: listboxProps.as || "ul"
          }
        }, {
          children: [groupedOptions.map((option, index) => {
            if (groupBy) {
              const typedOption = option;
              return renderGroup({
                key: String(typedOption.key),
                group: typedOption.group,
                children: typedOption.options.map((option2, index2) => renderListOption(option2, typedOption.index + index2))
              });
            }
            return renderListOption(option, index);
          }), loading && groupedOptions.length === 0 ? (0, import_jsx_runtime8.jsx)(SlotLoading, _extends({}, loadingProps, {
            children: loadingText
          })) : null, groupedOptions.length === 0 && !freeSolo && !loading ? (0, import_jsx_runtime8.jsx)(SlotNoOptions, _extends({}, noOptionsProps, {
            children: noOptionsText
          })) : null]
        }))
      })
    });
  }
  return (0, import_jsx_runtime8.jsxs)(React8.Fragment, {
    children: [(0, import_jsx_runtime8.jsxs)(SlotRoot, _extends({}, rootProps, {
      children: [startDecorator && (0, import_jsx_runtime8.jsx)(SlotStartDecorator, _extends({}, startDecoratorProps, {
        children: startDecorator
      })), (0, import_jsx_runtime8.jsxs)(SlotWrapper, _extends({}, wrapperProps, {
        children: [selectedOptions, (0, import_jsx_runtime8.jsx)(SlotInput, _extends({}, inputProps))]
      })), endDecorator && (0, import_jsx_runtime8.jsx)(SlotEndDecorator, _extends({}, endDecoratorProps, {
        children: endDecorator
      })), hasClearIcon ? (0, import_jsx_runtime8.jsx)(SlotClearIndicator, _extends({}, clearIndicatorProps, {
        children: clearIcon
      })) : null, hasPopupIcon ? (0, import_jsx_runtime8.jsx)(SlotPopupIndicator, _extends({}, popupIndicatorProps, {
        children: popupIcon
      })) : null]
    })), popup]
  });
});
true ? Autocomplete.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Identifies the element (or elements) that describes the object.
   * @see aria-labelledby
   */
  "aria-describedby": import_prop_types5.default.string,
  /**
   * Defines a string value that labels the current element.
   * @see aria-labelledby.
   */
  "aria-label": import_prop_types5.default.string,
  /**
   * Identifies the element (or elements) that labels the current element.
   * @see aria-describedby.
   */
  "aria-labelledby": import_prop_types5.default.string,
  /**
   * If `true`, the portion of the selected suggestion that the user hasn't typed,
   * known as the completion string, appears inline after the input cursor in the textbox.
   * The inline completion string is visually highlighted and has a selected state.
   * @default false
   */
  autoComplete: import_prop_types5.default.bool,
  /**
   * If `true`, the `input` element is focused during the first mount.
   */
  autoFocus: import_prop_types5.default.bool,
  /**
   * If `true`, the first option is automatically highlighted.
   * @default false
   */
  autoHighlight: import_prop_types5.default.bool,
  /**
   * If `true`, the selected option becomes the value of the input
   * when the Autocomplete loses focus unless the user chooses
   * a different option or changes the character string in the input.
   *
   * When using the `freeSolo` mode, the typed value will be the input value
   * if the Autocomplete loses focus without highlighting an option.
   * @default false
   */
  autoSelect: import_prop_types5.default.bool,
  /**
   * Control if the input should be blurred when an option is selected:
   *
   * - `false` the input is not blurred.
   * - `true` the input is always blurred.
   * - `touch` the input is blurred after a touch event.
   * - `mouse` the input is blurred after a mouse event.
   * @default false
   */
  blurOnSelect: import_prop_types5.default.oneOfType([import_prop_types5.default.oneOf(["mouse", "touch"]), import_prop_types5.default.bool]),
  /**
   * The icon to display in place of the default clear icon.
   * @default <ClearIcon fontSize="md" />
   */
  clearIcon: import_prop_types5.default.node,
  /**
   * If `true`, the input's text is cleared on blur if no value is selected.
   *
   * Set it to `true` if you want to help the user enter a new value.
   * Set it to `false` if you want to help the user resume their search.
   * @default !props.freeSolo
   */
  clearOnBlur: import_prop_types5.default.bool,
  /**
   * If `true`, clear all values when the user presses escape and the popup is closed.
   * @default false
   */
  clearOnEscape: import_prop_types5.default.bool,
  /**
   * Override the default text for the *clear* icon button.
   *
   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
   * @default 'Clear'
   */
  clearText: import_prop_types5.default.string,
  /**
   * Override the default text for the *close popup* icon button.
   *
   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
   * @default 'Close'
   */
  closeText: import_prop_types5.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types5.default.oneOf(["danger", "neutral", "primary", "success", "warning"]),
  /**
   * The default value. Use when the component is not controlled.
   * @default props.multiple ? [] : null
   */
  defaultValue: chainPropTypes(import_prop_types5.default.any, (props) => {
    if (props.multiple && props.defaultValue !== void 0 && !Array.isArray(props.defaultValue)) {
      return new Error(["MUI: The Autocomplete expects the `defaultValue` prop to be an array when `multiple={true}` or undefined.", `However, ${props.defaultValue} was provided.`].join("\n"));
    }
    return null;
  }),
  /**
   * If `true`, the input can't be cleared.
   * @default false
   */
  disableClearable: import_prop_types5.default.bool,
  /**
   * If `true`, the popup won't close when a value is selected.
   * @default false
   */
  disableCloseOnSelect: import_prop_types5.default.bool,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: import_prop_types5.default.bool,
  /**
   * If `true`, will allow focus on disabled items.
   * @default false
   */
  disabledItemsFocusable: import_prop_types5.default.bool,
  /**
   * If `true`, the list box in the popup will not wrap focus.
   * @default false
   */
  disableListWrap: import_prop_types5.default.bool,
  /**
   * Trailing adornment for this input.
   */
  endDecorator: import_prop_types5.default.node,
  /**
   * If `true`, the `input` will indicate an error.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   * @default false
   */
  error: import_prop_types5.default.bool,
  /**
   * A function that determines the filtered options to be rendered on search.
   *
   * @default createFilterOptions()
   * @param {Value[]} options The options to render.
   * @param {object} state The state of the component.
   * @returns {Value[]}
   */
  filterOptions: import_prop_types5.default.func,
  /**
   * If `true`, hide the selected options from the list box.
   * @default false
   */
  filterSelectedOptions: import_prop_types5.default.bool,
  /**
   * Force the visibility display of the popup icon.
   * @default 'auto'
   */
  forcePopupIcon: import_prop_types5.default.oneOfType([import_prop_types5.default.oneOf(["auto"]), import_prop_types5.default.bool]),
  /**
   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.
   * @default false
   */
  freeSolo: import_prop_types5.default.bool,
  /**
   * The label to display when the tags are truncated (`limitTags`).
   *
   * @param {string | number} more The number of truncated tags.
   * @returns {ReactNode}
   * @default (more: string | number) => `+${more}`
   */
  getLimitTagsText: import_prop_types5.default.func,
  /**
   * Used to determine the disabled state for a given option.
   *
   * @param {Value} option The option to test.
   * @returns {boolean}
   */
  getOptionDisabled: import_prop_types5.default.func,
  /**
   * Used to determine the key for a given option.
   * This can be useful when the labels of options are not unique (since labels are used as keys by default).
   *
   * @param {Value} option The option to get the key for.
   * @returns {string | number}
   */
  getOptionKey: import_prop_types5.default.func,
  /**
   * Used to determine the string value for a given option.
   * It's used to fill the input (and the list box options if `renderOption` is not provided).
   *
   * If used in free solo mode, it must accept both the type of the options and a string.
   *
   * @param {Value} option
   * @returns {string}
   * @default (option) => option.label ?? option
   */
  getOptionLabel: import_prop_types5.default.func,
  /**
   * If provided, the options will be grouped under the returned string.
   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.
   *
   * @param {Value} options The options to group.
   * @returns {string}
   */
  groupBy: import_prop_types5.default.func,
  /**
   * If `true`, the component handles the "Home" and "End" keys when the popup is open.
   * It should move focus to the first option and last option, respectively.
   * @default !props.freeSolo
   */
  handleHomeEndKeys: import_prop_types5.default.bool,
  /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide an id it will fall back to a randomly generated one.
   */
  id: import_prop_types5.default.string,
  /**
   * If `true`, the highlight can move to the input.
   * @default false
   */
  includeInputInList: import_prop_types5.default.bool,
  /**
   * The input value.
   */
  inputValue: import_prop_types5.default.string,
  /**
   * Used to determine if the option represents the given value.
   * Uses strict equality by default.
   * ⚠️ Both arguments need to be handled, an option can only match with one value.
   *
   * @param {Value} option The option to test.
   * @param {Value} value The value to test against.
   * @returns {boolean}
   */
  isOptionEqualToValue: import_prop_types5.default.func,
  /**
   * The maximum number of tags that will be visible when not focused.
   * Set `-1` to disable the limit.
   * @default -1
   */
  limitTags: integerPropType_default,
  /**
   * If `true`, the component is in a loading state.
   * This shows the `loadingText` in place of suggestions (only if there are no suggestions to show, for example `options` are empty).
   * @default false
   */
  loading: import_prop_types5.default.bool,
  /**
   * Text to display when in a loading state.
   *
   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
   * @default 'Loading…'
   */
  loadingText: import_prop_types5.default.node,
  /**
   * If `true`, `value` must be an array and the menu will support multiple selections.
   * @default false
   */
  multiple: import_prop_types5.default.bool,
  /**
   * Name attribute of the `input` element.
   */
  name: import_prop_types5.default.string,
  /**
   * Text to display when there are no options.
   *
   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
   * @default 'No options'
   */
  noOptionsText: import_prop_types5.default.node,
  /**
   * Callback fired when the value changes.
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   * @param {Value|Value[]} value The new value of the component.
   * @param {string} reason One of "createOption", "selectOption", "removeOption", "blur" or "clear".
   * @param {string} [details]
   */
  onChange: import_prop_types5.default.func,
  /**
   * Callback fired when the popup requests to be closed.
   * Use in controlled mode (see open).
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   * @param {string} reason Can be: `"toggleInput"`, `"escape"`, `"selectOption"`, `"removeOption"`, `"blur"`.
   */
  onClose: import_prop_types5.default.func,
  /**
   * Callback fired when the highlight option changes.
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   * @param {Value} option The highlighted option.
   * @param {string} reason Can be: `"keyboard"`, `"auto"`, `"mouse"`, `"touch"`.
   */
  onHighlightChange: import_prop_types5.default.func,
  /**
   * Callback fired when the input value changes.
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   * @param {string} value The new value of the text input.
   * @param {string} reason Can be: `"input"` (user input), `"reset"` (programmatic change), `"clear"`.
   */
  onInputChange: import_prop_types5.default.func,
  /**
   * @ignore
   */
  onKeyDown: import_prop_types5.default.func,
  /**
   * Callback fired when the popup requests to be opened.
   * Use in controlled mode (see open).
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   */
  onOpen: import_prop_types5.default.func,
  /**
   * If `true`, the component is shown.
   */
  open: import_prop_types5.default.bool,
  /**
   * If `true`, the popup will open on input focus.
   * @default false
   */
  openOnFocus: import_prop_types5.default.bool,
  /**
   * Override the default text for the *open popup* icon button.
   *
   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
   * @default 'Open'
   */
  openText: import_prop_types5.default.string,
  /**
   * Array of options.
   */
  options: import_prop_types5.default.array.isRequired,
  /**
   * The input placeholder
   */
  placeholder: import_prop_types5.default.string,
  /**
   * The icon to display in place of the default popup icon.
   * @default <ArrowDropDownIcon />
   */
  popupIcon: import_prop_types5.default.node,
  /**
   * If `true`, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.
   * @default false
   */
  readOnly: import_prop_types5.default.bool,
  /**
   * Render the group.
   *
   * @param {AutocompleteRenderGroupParams} params The group to render.
   * @returns {ReactNode}
   */
  renderGroup: import_prop_types5.default.func,
  /**
   * Render the option, use `getOptionLabel` by default.
   *
   * @param {object} props The props to apply on the li element.
   * @param {T} option The option to render.
   * @param {object} state The state of the component.
   * @returns {ReactNode}
   */
  renderOption: import_prop_types5.default.func,
  /**
   * Render the selected value.
   *
   * @param {T[]} value The `value` provided to the component.
   * @param {function} getTagProps A tag props getter.
   * @param {object} ownerState The state of the Autocomplete component.
   * @returns {ReactNode}
   */
  renderTags: import_prop_types5.default.func,
  /**
   * If `true`, the `input` element is required.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  required: import_prop_types5.default.bool,
  /**
   * If `true`, the input's text is selected on focus.
   * It helps the user clear the selected value.
   * @default !props.freeSolo
   */
  selectOnFocus: import_prop_types5.default.bool,
  /**
   * The size of the component.
   * @default 'md'
   */
  size: import_prop_types5.default.oneOfType([import_prop_types5.default.oneOf(["sm", "md", "lg"]), import_prop_types5.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types5.default.shape({
    clearIndicator: import_prop_types5.default.oneOfType([import_prop_types5.default.func, import_prop_types5.default.object]),
    endDecorator: import_prop_types5.default.oneOfType([import_prop_types5.default.func, import_prop_types5.default.object]),
    input: import_prop_types5.default.oneOfType([import_prop_types5.default.func, import_prop_types5.default.object]),
    limitTag: import_prop_types5.default.oneOfType([import_prop_types5.default.func, import_prop_types5.default.object]),
    listbox: import_prop_types5.default.oneOfType([import_prop_types5.default.func, import_prop_types5.default.object]),
    loading: import_prop_types5.default.oneOfType([import_prop_types5.default.func, import_prop_types5.default.object]),
    noOptions: import_prop_types5.default.oneOfType([import_prop_types5.default.func, import_prop_types5.default.object]),
    option: import_prop_types5.default.oneOfType([import_prop_types5.default.func, import_prop_types5.default.object]),
    popupIndicator: import_prop_types5.default.oneOfType([import_prop_types5.default.func, import_prop_types5.default.object]),
    root: import_prop_types5.default.oneOfType([import_prop_types5.default.func, import_prop_types5.default.object]),
    startDecorator: import_prop_types5.default.oneOfType([import_prop_types5.default.func, import_prop_types5.default.object]),
    wrapper: import_prop_types5.default.oneOfType([import_prop_types5.default.func, import_prop_types5.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types5.default.shape({
    clearIndicator: import_prop_types5.default.elementType,
    endDecorator: import_prop_types5.default.elementType,
    input: import_prop_types5.default.elementType,
    limitTag: import_prop_types5.default.elementType,
    listbox: import_prop_types5.default.elementType,
    loading: import_prop_types5.default.elementType,
    noOptions: import_prop_types5.default.elementType,
    option: import_prop_types5.default.elementType,
    popupIndicator: import_prop_types5.default.elementType,
    root: import_prop_types5.default.elementType,
    startDecorator: import_prop_types5.default.elementType,
    wrapper: import_prop_types5.default.elementType
  }),
  /**
   * Leading adornment for this input.
   */
  startDecorator: import_prop_types5.default.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types5.default.oneOfType([import_prop_types5.default.arrayOf(import_prop_types5.default.oneOfType([import_prop_types5.default.func, import_prop_types5.default.object, import_prop_types5.default.bool])), import_prop_types5.default.func, import_prop_types5.default.object]),
  /**
   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
   */
  type: import_prop_types5.default.string,
  /**
   * The value of the autocomplete.
   *
   * The value must have reference equality with the option in order to be selected.
   * You can customize the equality behavior with the `isOptionEqualToValue` prop.
   */
  value: chainPropTypes(import_prop_types5.default.any, (props) => {
    if (props.multiple && props.value !== void 0 && !Array.isArray(props.value)) {
      return new Error(["MUI: The Autocomplete expects the `value` prop to be an array when `multiple={true}` or undefined.", `However, ${props.value} was provided.`].join("\n"));
    }
    return null;
  }),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'outlined'
   */
  variant: import_prop_types5.default.oneOf(["outlined", "plain", "soft", "solid"])
} : void 0;
var Autocomplete_default = Autocomplete;

export {
  Close_default,
  getChipDeleteUtilityClass,
  chipDeleteClasses_default,
  ChipDelete_default,
  getListSubheaderUtilityClass,
  listSubheaderClasses_default,
  ListSubheader_default,
  getAutocompleteUtilityClass,
  autocompleteClasses_default,
  getAutocompleteListboxUtilityClass,
  autocompleteListboxClasses_default,
  AutocompleteListbox_default,
  getAutocompleteOptionUtilityClass,
  autocompleteOptionClasses_default,
  AutocompleteOption_default,
  Autocomplete_default
};
//# sourceMappingURL=chunk-TECJTYZR.js.map
