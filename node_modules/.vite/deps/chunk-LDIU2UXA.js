import {
  getStepperUtilityClass
} from "./chunk-BWPU4XUO.js";
import {
  useSlot
} from "./chunk-67R4TDGQ.js";
import {
  styled_default,
  useThemeProps
} from "./chunk-2KKR5LVU.js";
import {
  capitalize,
  composeClasses
} from "./chunk-T54BCNI5.js";
import {
  _extends,
  _objectWithoutPropertiesLoose,
  clsx_default,
  init_clsx,
  init_extends,
  init_objectWithoutPropertiesLoose,
  require_prop_types
} from "./chunk-VFD7MG3A.js";
import {
  require_jsx_runtime
} from "./chunk-DFRVR3IJ.js";
import {
  __toESM,
  require_react
} from "./chunk-VEEUVK2K.js";

// node_modules/@mui/joy/Stepper/Stepper.js
init_objectWithoutPropertiesLoose();
init_extends();
var React = __toESM(require_react());
init_clsx();
var import_prop_types = __toESM(require_prop_types());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var _excluded = ["className", "component", "size", "children", "orientation", "slots", "slotProps"];
var useUtilityClasses = (ownerState) => {
  const {
    size,
    orientation
  } = ownerState;
  const slots = {
    root: ["root", orientation, size && `size${capitalize(size)}`]
  };
  return composeClasses(slots, getStepperUtilityClass, {});
};
var StepperRoot = styled_default("ol", {
  name: "JoyStepper",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme
}) => {
  return {
    "--Stepper-indicatorColumn": "auto",
    // For vertical stepper, to control the column width of the indicator.
    "--Step-connectorThickness": "1px",
    "--Step-indicatorDotSize": "0.375rem",
    boxSizing: "border-box",
    display: "flex",
    margin: 0,
    // Reset browser default style.
    padding: 0,
    // Reset browser default style.
    variants: [{
      props: {
        size: "sm"
      },
      style: _extends({
        "--Stepper-verticalGap": "0.5rem",
        "--Step-gap": "0.375rem",
        "--Step-connectorInset": "0.25rem",
        "--StepIndicator-size": "1.25rem"
      }, theme.typography["title-sm"])
    }, {
      props: {
        size: "md"
      },
      style: _extends({
        "--Stepper-verticalGap": "0.75rem",
        "--Step-gap": "0.5rem",
        "--Step-connectorInset": "0.375rem",
        "--StepIndicator-size": "1.5rem"
      }, theme.typography["title-md"])
    }, {
      props: {
        size: "lg"
      },
      style: _extends({
        "--Stepper-verticalGap": "0.75rem",
        "--Step-gap": "0.5rem",
        "--Step-connectorInset": "0.5rem",
        "--StepIndicator-size": "1.75rem"
      }, theme.typography["title-lg"])
    }, {
      props: {
        orientation: "vertical"
      },
      style: {
        flexDirection: "column",
        gap: "var(--Stepper-verticalGap)"
      }
    }]
  };
});
var Stepper = React.forwardRef(function Stepper2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyStepper"
  });
  const {
    className,
    component = "ol",
    size = "md",
    children,
    orientation = "horizontal",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  const ownerState = _extends({}, props, {
    component,
    orientation,
    size
  });
  const classes = useUtilityClasses(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: StepperRoot,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime.jsx)(SlotRoot, _extends({}, rootProps, {
    children: React.Children.map(children, (child, index) => {
      if (!React.isValidElement(child)) {
        return child;
      }
      const extraProps = {};
      if (index === 0) {
        extraProps["data-first-child"] = "";
      }
      if (index === React.Children.count(children) - 1) {
        extraProps["data-last-child"] = "";
      }
      return React.cloneElement(child, extraProps);
    })
  }));
});
true ? Stepper.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Used to render icon or text elements inside the Stepper if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types.default.node,
  /**
   * @ignore
   */
  className: import_prop_types.default.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types.default.elementType,
  /**
   * The component orientation.
   * @default 'horizontal'
   */
  orientation: import_prop_types.default.oneOf(["horizontal", "vertical"]),
  /**
   * The size of the component.
   * It accepts theme values between 'sm' and 'lg'.
   * @default 'md'
   */
  size: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["lg", "md", "sm"]), import_prop_types.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types.default.shape({
    root: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types.default.shape({
    root: import_prop_types.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object])
} : void 0;
var Stepper_default = Stepper;

export {
  Stepper_default
};
//# sourceMappingURL=chunk-LDIU2UXA.js.map
